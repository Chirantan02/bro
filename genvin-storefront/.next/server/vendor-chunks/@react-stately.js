"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@react-stately";
exports.ids = ["vendor-chunks/@react-stately"];
exports.modules = {

/***/ "(ssr)/./node_modules/@react-stately/datepicker/dist/import.mjs":
/*!****************************************************************!*\
  !*** ./node_modules/@react-stately/datepicker/dist/import.mjs ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useDateFieldState: () => (/* binding */ $3c0fc76039f1c516$export$60e84778edff6d26),\n/* harmony export */   useDatePickerState: () => (/* binding */ $ab5bf3f618090389$export$87194bb378cc3ac2),\n/* harmony export */   useDateRangePickerState: () => (/* binding */ $93c38a5e28be6249$export$e50a61c1de9f574),\n/* harmony export */   useTimeFieldState: () => (/* binding */ $eff5d8ee529ac4bb$export$fd53cef0cc796101)\n/* harmony export */ });\n/* harmony import */ var _internationalized_date__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @internationalized/date */ \"(ssr)/./node_modules/@internationalized/date/dist/import.mjs\");\n/* harmony import */ var _react_stately_overlays__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @react-stately/overlays */ \"(ssr)/./node_modules/@react-stately/overlays/dist/import.mjs\");\n/* harmony import */ var _react_stately_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @react-stately/utils */ \"(ssr)/./node_modules/@react-stately/utils/dist/import.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _internationalized_string__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @internationalized/string */ \"(ssr)/./node_modules/@internationalized/string/dist/import.mjs\");\n\n\n\n\n\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ /*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ \n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ \n\nfunction $35a22f14a1f04b11$export$eac50920cf2fd59a(value, minValue, maxValue) {\n    return value != null && (minValue != null && value.compare(minValue) < 0 || maxValue != null && value.compare(maxValue) > 0);\n}\nconst $35a22f14a1f04b11$var$DEFAULT_FIELD_OPTIONS = {\n    year: \"numeric\",\n    month: \"numeric\",\n    day: \"numeric\",\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\"\n};\nconst $35a22f14a1f04b11$var$TWO_DIGIT_FIELD_OPTIONS = {\n    year: \"numeric\",\n    month: \"2-digit\",\n    day: \"2-digit\",\n    hour: \"2-digit\",\n    minute: \"2-digit\",\n    second: \"2-digit\"\n};\nfunction $35a22f14a1f04b11$export$7e319ea407e63bc0(fieldOptions, options) {\n    let defaultFieldOptions = options.shouldForceLeadingZeros ? $35a22f14a1f04b11$var$TWO_DIGIT_FIELD_OPTIONS : $35a22f14a1f04b11$var$DEFAULT_FIELD_OPTIONS;\n    fieldOptions = {\n        ...defaultFieldOptions,\n        ...fieldOptions\n    };\n    let granularity = options.granularity || \"minute\";\n    let keys = Object.keys(fieldOptions);\n    var _options_maxGranularity;\n    let startIdx = keys.indexOf((_options_maxGranularity = options.maxGranularity) !== null && _options_maxGranularity !== void 0 ? _options_maxGranularity : \"year\");\n    if (startIdx < 0) startIdx = 0;\n    let endIdx = keys.indexOf(granularity);\n    if (endIdx < 0) endIdx = 2;\n    if (startIdx > endIdx) throw new Error(\"maxGranularity must be greater than granularity\");\n    let opts = keys.slice(startIdx, endIdx + 1).reduce((opts, key)=>{\n        opts[key] = fieldOptions[key];\n        return opts;\n    }, {});\n    if (options.hourCycle != null) opts.hour12 = options.hourCycle === 12;\n    opts.timeZone = options.timeZone || \"UTC\";\n    let hasTime = granularity === \"hour\" || granularity === \"minute\" || granularity === \"second\";\n    if (hasTime && options.timeZone && !options.hideTimeZone) opts.timeZoneName = \"short\";\n    if (options.showEra && startIdx === 0) opts.era = \"short\";\n    return opts;\n}\nfunction $35a22f14a1f04b11$export$c5221a78ef73c5e9(placeholderValue) {\n    if (placeholderValue && \"hour\" in placeholderValue) return placeholderValue;\n    return new (0, _internationalized_date__WEBPACK_IMPORTED_MODULE_1__.Time)();\n}\nfunction $35a22f14a1f04b11$export$61a490a80c552550(value, calendar) {\n    if (value === null) return null;\n    if (!value) return undefined;\n    return (0, _internationalized_date__WEBPACK_IMPORTED_MODULE_1__.toCalendar)(value, calendar);\n}\nfunction $35a22f14a1f04b11$export$66aa2b09de4b1ea5(placeholderValue, granularity, calendar, timeZone) {\n    if (placeholderValue) return $35a22f14a1f04b11$export$61a490a80c552550(placeholderValue, calendar);\n    let date = (0, _internationalized_date__WEBPACK_IMPORTED_MODULE_1__.toCalendar)((0, _internationalized_date__WEBPACK_IMPORTED_MODULE_1__.now)(timeZone).set({\n        hour: 0,\n        minute: 0,\n        second: 0,\n        millisecond: 0\n    }), calendar);\n    if (granularity === \"year\" || granularity === \"month\" || granularity === \"day\") return (0, _internationalized_date__WEBPACK_IMPORTED_MODULE_1__.toCalendarDate)(date);\n    if (!timeZone) return (0, _internationalized_date__WEBPACK_IMPORTED_MODULE_1__.toCalendarDateTime)(date);\n    return date;\n}\nfunction $35a22f14a1f04b11$export$2440da353cedad43(v, granularity) {\n    // Compute default granularity and time zone from the value. If the value becomes null, keep the last values.\n    let defaultTimeZone = v && \"timeZone\" in v ? v.timeZone : undefined;\n    let defaultGranularity = v && \"minute\" in v ? \"minute\" : \"day\";\n    // props.granularity must actually exist in the value if one is provided.\n    if (v && granularity && !(granularity in v)) throw new Error(\"Invalid granularity \" + granularity + \" for value \" + v.toString());\n    let [lastValue, setLastValue] = (0, react__WEBPACK_IMPORTED_MODULE_0__.useState)([\n        defaultGranularity,\n        defaultTimeZone\n    ]);\n    // If the granularity or time zone changed, update the last value.\n    if (v && (lastValue[0] !== defaultGranularity || lastValue[1] !== defaultTimeZone)) setLastValue([\n        defaultGranularity,\n        defaultTimeZone\n    ]);\n    if (!granularity) granularity = v ? defaultGranularity : lastValue[0];\n    let timeZone = v ? defaultTimeZone : lastValue[1];\n    return [\n        granularity,\n        timeZone\n    ];\n}\n\n\n\n\n\nfunction $ab5bf3f618090389$export$87194bb378cc3ac2(props) {\n    var _props_isDateUnavailable;\n    let overlayState = (0, _react_stately_overlays__WEBPACK_IMPORTED_MODULE_2__.useOverlayTriggerState)(props);\n    let [value, setValue] = (0, _react_stately_utils__WEBPACK_IMPORTED_MODULE_3__.useControlledState)(props.value, props.defaultValue || null, props.onChange);\n    let v = value || props.placeholderValue;\n    let [granularity, defaultTimeZone] = (0, $35a22f14a1f04b11$export$2440da353cedad43)(v, props.granularity);\n    let dateValue = value != null ? value.toDate(defaultTimeZone !== null && defaultTimeZone !== void 0 ? defaultTimeZone : \"UTC\") : null;\n    let hasTime = granularity === \"hour\" || granularity === \"minute\" || granularity === \"second\";\n    var _props_shouldCloseOnSelect;\n    let shouldCloseOnSelect = (_props_shouldCloseOnSelect = props.shouldCloseOnSelect) !== null && _props_shouldCloseOnSelect !== void 0 ? _props_shouldCloseOnSelect : true;\n    let [selectedDate, setSelectedDate] = (0, react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    let [selectedTime, setSelectedTime] = (0, react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    if (value) {\n        selectedDate = value;\n        if (\"hour\" in value) selectedTime = value;\n    }\n    // props.granularity must actually exist in the value if one is provided.\n    if (v && !(granularity in v)) throw new Error(\"Invalid granularity \" + granularity + \" for value \" + v.toString());\n    let commitValue = (date, time)=>{\n        setValue(\"timeZone\" in time ? time.set((0, _internationalized_date__WEBPACK_IMPORTED_MODULE_1__.toCalendarDate)(date)) : (0, _internationalized_date__WEBPACK_IMPORTED_MODULE_1__.toCalendarDateTime)(date, time));\n        setSelectedDate(null);\n        setSelectedTime(null);\n    };\n    // Intercept setValue to make sure the Time section is not changed by date selection in Calendar\n    let selectDate = (newValue)=>{\n        let shouldClose = typeof shouldCloseOnSelect === \"function\" ? shouldCloseOnSelect() : shouldCloseOnSelect;\n        if (hasTime) {\n            if (selectedTime || shouldClose) commitValue(newValue, selectedTime || (0, $35a22f14a1f04b11$export$c5221a78ef73c5e9)(props.placeholderValue));\n            else setSelectedDate(newValue);\n        } else setValue(newValue);\n        if (shouldClose) overlayState.setOpen(false);\n    };\n    let selectTime = (newValue)=>{\n        if (selectedDate && newValue) commitValue(selectedDate, newValue);\n        else setSelectedTime(newValue);\n    };\n    let isValueInvalid = props.isInvalid || props.validationState === \"invalid\" || (0, $35a22f14a1f04b11$export$eac50920cf2fd59a)(value, props.minValue, props.maxValue) || value && ((_props_isDateUnavailable = props.isDateUnavailable) === null || _props_isDateUnavailable === void 0 ? void 0 : _props_isDateUnavailable.call(props, value));\n    let validationState = props.validationState || (isValueInvalid ? \"invalid\" : null);\n    return {\n        value: value,\n        setValue: setValue,\n        dateValue: selectedDate,\n        timeValue: selectedTime,\n        setDateValue: selectDate,\n        setTimeValue: selectTime,\n        granularity: granularity,\n        hasTime: hasTime,\n        ...overlayState,\n        setOpen (isOpen) {\n            // Commit the selected date when the calendar is closed. Use a placeholder time if one wasn't set.\n            // If only the time was set and not the date, don't commit. The state will be preserved until\n            // the user opens the popover again.\n            if (!isOpen && !value && selectedDate && hasTime) commitValue(selectedDate, selectedTime || (0, $35a22f14a1f04b11$export$c5221a78ef73c5e9)(props.placeholderValue));\n            overlayState.setOpen(isOpen);\n        },\n        validationState: validationState,\n        isInvalid: isValueInvalid,\n        formatValue (locale, fieldOptions) {\n            if (!dateValue) return \"\";\n            let formatOptions = (0, $35a22f14a1f04b11$export$7e319ea407e63bc0)(fieldOptions, {\n                granularity: granularity,\n                timeZone: defaultTimeZone,\n                hideTimeZone: props.hideTimeZone,\n                hourCycle: props.hourCycle,\n                showEra: value.calendar.identifier === \"gregory\" && value.era === \"BC\"\n            });\n            let formatter = new (0, _internationalized_date__WEBPACK_IMPORTED_MODULE_1__.DateFormatter)(locale, formatOptions);\n            return formatter.format(dateValue);\n        }\n    };\n}\n\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ \n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ \n// These placeholders are based on the strings used by the <input type=\"date\">\n// implementations in Chrome and Firefox. Additional languages are supported\n// here than React Spectrum's typical translations.\nconst $3e3ed55ab2966714$var$placeholders = new (0, _internationalized_string__WEBPACK_IMPORTED_MODULE_4__.LocalizedStringDictionary)({\n    ach: {\n        year: \"mwaka\",\n        month: \"dwe\",\n        day: \"nino\"\n    },\n    af: {\n        year: \"jjjj\",\n        month: \"mm\",\n        day: \"dd\"\n    },\n    am: {\n        year: \"ዓዓዓዓ\",\n        month: \"ሚሜ\",\n        day: \"ቀቀ\"\n    },\n    an: {\n        year: \"aaaa\",\n        month: \"mm\",\n        day: \"dd\"\n    },\n    ar: {\n        year: \"سنة\",\n        month: \"شهر\",\n        day: \"يوم\"\n    },\n    ast: {\n        year: \"aaaa\",\n        month: \"mm\",\n        day: \"dd\"\n    },\n    az: {\n        year: \"iiii\",\n        month: \"aa\",\n        day: \"gg\"\n    },\n    be: {\n        year: \"гггг\",\n        month: \"мм\",\n        day: \"дд\"\n    },\n    bg: {\n        year: \"гггг\",\n        month: \"мм\",\n        day: \"дд\"\n    },\n    bn: {\n        year: \"yyyy\",\n        month: \"মিমি\",\n        day: \"dd\"\n    },\n    br: {\n        year: \"bbbb\",\n        month: \"mm\",\n        day: \"dd\"\n    },\n    bs: {\n        year: \"gggg\",\n        month: \"mm\",\n        day: \"dd\"\n    },\n    ca: {\n        year: \"aaaa\",\n        month: \"mm\",\n        day: \"dd\"\n    },\n    cak: {\n        year: \"jjjj\",\n        month: \"ii\",\n        day: \"q'q'\"\n    },\n    ckb: {\n        year: \"ساڵ\",\n        month: \"مانگ\",\n        day: \"ڕۆژ\"\n    },\n    cs: {\n        year: \"rrrr\",\n        month: \"mm\",\n        day: \"dd\"\n    },\n    cy: {\n        year: \"bbbb\",\n        month: \"mm\",\n        day: \"dd\"\n    },\n    da: {\n        year: \"\\xe5\\xe5\\xe5\\xe5\",\n        month: \"mm\",\n        day: \"dd\"\n    },\n    de: {\n        year: \"jjjj\",\n        month: \"mm\",\n        day: \"tt\"\n    },\n    dsb: {\n        year: \"llll\",\n        month: \"mm\",\n        day: \"źź\"\n    },\n    el: {\n        year: \"εεεε\",\n        month: \"μμ\",\n        day: \"ηη\"\n    },\n    en: {\n        year: \"yyyy\",\n        month: \"mm\",\n        day: \"dd\"\n    },\n    eo: {\n        year: \"jjjj\",\n        month: \"mm\",\n        day: \"tt\"\n    },\n    es: {\n        year: \"aaaa\",\n        month: \"mm\",\n        day: \"dd\"\n    },\n    et: {\n        year: \"aaaa\",\n        month: \"kk\",\n        day: \"pp\"\n    },\n    eu: {\n        year: \"uuuu\",\n        month: \"hh\",\n        day: \"ee\"\n    },\n    fa: {\n        year: \"سال\",\n        month: \"ماه\",\n        day: \"روز\"\n    },\n    ff: {\n        year: \"hhhh\",\n        month: \"ll\",\n        day: \"\\xf1\\xf1\"\n    },\n    fi: {\n        year: \"vvvv\",\n        month: \"kk\",\n        day: \"pp\"\n    },\n    fr: {\n        year: \"aaaa\",\n        month: \"mm\",\n        day: \"jj\"\n    },\n    fy: {\n        year: \"jjjj\",\n        month: \"mm\",\n        day: \"dd\"\n    },\n    ga: {\n        year: \"bbbb\",\n        month: \"mm\",\n        day: \"ll\"\n    },\n    gd: {\n        year: \"bbbb\",\n        month: \"mm\",\n        day: \"ll\"\n    },\n    gl: {\n        year: \"aaaa\",\n        month: \"mm\",\n        day: \"dd\"\n    },\n    he: {\n        year: \"שנה\",\n        month: \"חודש\",\n        day: \"יום\"\n    },\n    hr: {\n        year: \"gggg\",\n        month: \"mm\",\n        day: \"dd\"\n    },\n    hsb: {\n        year: \"llll\",\n        month: \"mm\",\n        day: \"dd\"\n    },\n    hu: {\n        year: \"\\xe9\\xe9\\xe9\\xe9\",\n        month: \"hh\",\n        day: \"nn\"\n    },\n    ia: {\n        year: \"aaaa\",\n        month: \"mm\",\n        day: \"dd\"\n    },\n    id: {\n        year: \"tttt\",\n        month: \"bb\",\n        day: \"hh\"\n    },\n    it: {\n        year: \"aaaa\",\n        month: \"mm\",\n        day: \"gg\"\n    },\n    ja: {\n        year: \" 年 \",\n        month: \"月\",\n        day: \"日\"\n    },\n    ka: {\n        year: \"წწწწ\",\n        month: \"თთ\",\n        day: \"რრ\"\n    },\n    kk: {\n        year: \"жжжж\",\n        month: \"аа\",\n        day: \"кк\"\n    },\n    kn: {\n        year: \"ವವವವ\",\n        month: \"ಮಿಮೀ\",\n        day: \"ದಿದಿ\"\n    },\n    ko: {\n        year: \"연도\",\n        month: \"월\",\n        day: \"일\"\n    },\n    lb: {\n        year: \"jjjj\",\n        month: \"mm\",\n        day: \"dd\"\n    },\n    lo: {\n        year: \"ປປປປ\",\n        month: \"ດດ\",\n        day: \"ວວ\"\n    },\n    lt: {\n        year: \"mmmm\",\n        month: \"mm\",\n        day: \"dd\"\n    },\n    lv: {\n        year: \"gggg\",\n        month: \"mm\",\n        day: \"dd\"\n    },\n    meh: {\n        year: \"aaaa\",\n        month: \"mm\",\n        day: \"dd\"\n    },\n    ml: {\n        year: \"വർഷം\",\n        month: \"മാസം\",\n        day: \"തീയതി\"\n    },\n    ms: {\n        year: \"tttt\",\n        month: \"mm\",\n        day: \"hh\"\n    },\n    nl: {\n        year: \"jjjj\",\n        month: \"mm\",\n        day: \"dd\"\n    },\n    nn: {\n        year: \"\\xe5\\xe5\\xe5\\xe5\",\n        month: \"mm\",\n        day: \"dd\"\n    },\n    no: {\n        year: \"\\xe5\\xe5\\xe5\\xe5\",\n        month: \"mm\",\n        day: \"dd\"\n    },\n    oc: {\n        year: \"aaaa\",\n        month: \"mm\",\n        day: \"jj\"\n    },\n    pl: {\n        year: \"rrrr\",\n        month: \"mm\",\n        day: \"dd\"\n    },\n    pt: {\n        year: \"aaaa\",\n        month: \"mm\",\n        day: \"dd\"\n    },\n    rm: {\n        year: \"oooo\",\n        month: \"mm\",\n        day: \"dd\"\n    },\n    ro: {\n        year: \"aaaa\",\n        month: \"ll\",\n        day: \"zz\"\n    },\n    ru: {\n        year: \"гггг\",\n        month: \"мм\",\n        day: \"дд\"\n    },\n    sc: {\n        year: \"aaaa\",\n        month: \"mm\",\n        day: \"dd\"\n    },\n    scn: {\n        year: \"aaaa\",\n        month: \"mm\",\n        day: \"jj\"\n    },\n    sk: {\n        year: \"rrrr\",\n        month: \"mm\",\n        day: \"dd\"\n    },\n    sl: {\n        year: \"llll\",\n        month: \"mm\",\n        day: \"dd\"\n    },\n    sr: {\n        year: \"гггг\",\n        month: \"мм\",\n        day: \"дд\"\n    },\n    sv: {\n        year: \"\\xe5\\xe5\\xe5\\xe5\",\n        month: \"mm\",\n        day: \"dd\"\n    },\n    szl: {\n        year: \"rrrr\",\n        month: \"mm\",\n        day: \"dd\"\n    },\n    tg: {\n        year: \"сссс\",\n        month: \"мм\",\n        day: \"рр\"\n    },\n    th: {\n        year: \"ปปปป\",\n        month: \"ดด\",\n        day: \"วว\"\n    },\n    tr: {\n        year: \"yyyy\",\n        month: \"aa\",\n        day: \"gg\"\n    },\n    uk: {\n        year: \"рррр\",\n        month: \"мм\",\n        day: \"дд\"\n    },\n    \"zh-CN\": {\n        year: \"年\",\n        month: \"月\",\n        day: \"日\"\n    },\n    \"zh-TW\": {\n        year: \"年\",\n        month: \"月\",\n        day: \"日\"\n    }\n}, \"en\");\nfunction $3e3ed55ab2966714$export$d3f5c5e0a5023fa0(field, value, locale) {\n    // Use the actual placeholder value for the era and day period fields.\n    if (field === \"era\" || field === \"dayPeriod\") return value;\n    if (field === \"year\" || field === \"month\" || field === \"day\") return $3e3ed55ab2966714$var$placeholders.getStringForLocale(field, locale);\n    // For time fields (e.g. hour, minute, etc.), use two dashes as the placeholder.\n    return \"––\";\n}\n\n\n\n\nconst $3c0fc76039f1c516$var$EDITABLE_SEGMENTS = {\n    year: true,\n    month: true,\n    day: true,\n    hour: true,\n    minute: true,\n    second: true,\n    dayPeriod: true,\n    era: true\n};\nconst $3c0fc76039f1c516$var$PAGE_STEP = {\n    year: 5,\n    month: 2,\n    day: 7,\n    hour: 2,\n    minute: 15,\n    second: 15\n};\n// Node seems to convert everything to lowercase...\nconst $3c0fc76039f1c516$var$TYPE_MAPPING = {\n    dayperiod: \"dayPeriod\"\n};\nfunction $3c0fc76039f1c516$export$60e84778edff6d26(props) {\n    let { locale: locale, createCalendar: createCalendar, hideTimeZone: hideTimeZone, isDisabled: isDisabled, isReadOnly: isReadOnly, isRequired: isRequired } = props;\n    let v = props.value || props.defaultValue || props.placeholderValue;\n    let [granularity, defaultTimeZone] = (0, $35a22f14a1f04b11$export$2440da353cedad43)(v, props.granularity);\n    let timeZone = defaultTimeZone || \"UTC\";\n    // props.granularity must actually exist in the value if one is provided.\n    if (v && !(granularity in v)) throw new Error(\"Invalid granularity \" + granularity + \" for value \" + v.toString());\n    let defaultFormatter = (0, react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>new (0, _internationalized_date__WEBPACK_IMPORTED_MODULE_1__.DateFormatter)(locale), [\n        locale\n    ]);\n    let calendar = (0, react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>createCalendar(defaultFormatter.resolvedOptions().calendar), [\n        createCalendar,\n        defaultFormatter\n    ]);\n    let [value, setDate] = (0, _react_stately_utils__WEBPACK_IMPORTED_MODULE_3__.useControlledState)(props.value, props.defaultValue, props.onChange);\n    let calendarValue = (0, react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>(0, $35a22f14a1f04b11$export$61a490a80c552550)(value, calendar), [\n        value,\n        calendar\n    ]);\n    // We keep track of the placeholder date separately in state so that onChange is not called\n    // until all segments are set. If the value === null (not undefined), then assume the component\n    // is controlled, so use the placeholder as the value until all segments are entered so it doesn't\n    // change from uncontrolled to controlled and emit a warning.\n    let [placeholderDate, setPlaceholderDate] = (0, react__WEBPACK_IMPORTED_MODULE_0__.useState)(()=>(0, $35a22f14a1f04b11$export$66aa2b09de4b1ea5)(props.placeholderValue, granularity, calendar, defaultTimeZone));\n    let val = calendarValue || placeholderDate;\n    let showEra = calendar.identifier === \"gregory\" && val.era === \"BC\";\n    var _props_maxGranularity;\n    let formatOpts = (0, react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>({\n            granularity: granularity,\n            maxGranularity: (_props_maxGranularity = props.maxGranularity) !== null && _props_maxGranularity !== void 0 ? _props_maxGranularity : \"year\",\n            timeZone: defaultTimeZone,\n            hideTimeZone: hideTimeZone,\n            hourCycle: props.hourCycle,\n            showEra: showEra,\n            shouldForceLeadingZeros: props.shouldForceLeadingZeros\n        }), [\n        props.maxGranularity,\n        granularity,\n        props.hourCycle,\n        props.shouldForceLeadingZeros,\n        defaultTimeZone,\n        hideTimeZone,\n        showEra\n    ]);\n    let opts = (0, react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>(0, $35a22f14a1f04b11$export$7e319ea407e63bc0)({}, formatOpts), [\n        formatOpts\n    ]);\n    let dateFormatter = (0, react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>new (0, _internationalized_date__WEBPACK_IMPORTED_MODULE_1__.DateFormatter)(locale, opts), [\n        locale,\n        opts\n    ]);\n    let resolvedOptions = (0, react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>dateFormatter.resolvedOptions(), [\n        dateFormatter\n    ]);\n    // Determine how many editable segments there are for validation purposes.\n    // The result is cached for performance.\n    let allSegments = (0, react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>dateFormatter.formatToParts(new Date()).filter((seg)=>$3c0fc76039f1c516$var$EDITABLE_SEGMENTS[seg.type]).reduce((p, seg)=>(p[seg.type] = true, p), {}), [\n        dateFormatter\n    ]);\n    let [validSegments, setValidSegments] = (0, react__WEBPACK_IMPORTED_MODULE_0__.useState)(()=>props.value || props.defaultValue ? {\n            ...allSegments\n        } : {});\n    let clearedSegment = (0, react__WEBPACK_IMPORTED_MODULE_0__.useRef)();\n    // Reset placeholder when calendar changes\n    let lastCalendarIdentifier = (0, react__WEBPACK_IMPORTED_MODULE_0__.useRef)(calendar.identifier);\n    (0, react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (calendar.identifier !== lastCalendarIdentifier.current) {\n            lastCalendarIdentifier.current = calendar.identifier;\n            setPlaceholderDate((placeholder)=>Object.keys(validSegments).length > 0 ? (0, _internationalized_date__WEBPACK_IMPORTED_MODULE_1__.toCalendar)(placeholder, calendar) : (0, $35a22f14a1f04b11$export$66aa2b09de4b1ea5)(props.placeholderValue, granularity, calendar, defaultTimeZone));\n        }\n    }, [\n        calendar,\n        granularity,\n        validSegments,\n        defaultTimeZone,\n        props.placeholderValue\n    ]);\n    // If there is a value prop, and some segments were previously placeholders, mark them all as valid.\n    if (value && Object.keys(validSegments).length < Object.keys(allSegments).length) {\n        validSegments = {\n            ...allSegments\n        };\n        setValidSegments(validSegments);\n    }\n    // If the value is set to null and all segments are valid, reset the placeholder.\n    if (value == null && Object.keys(validSegments).length === Object.keys(allSegments).length) {\n        validSegments = {};\n        setValidSegments(validSegments);\n        setPlaceholderDate((0, $35a22f14a1f04b11$export$66aa2b09de4b1ea5)(props.placeholderValue, granularity, calendar, defaultTimeZone));\n    }\n    // If all segments are valid, use the date from state, otherwise use the placeholder date.\n    let displayValue = calendarValue && Object.keys(validSegments).length >= Object.keys(allSegments).length ? calendarValue : placeholderDate;\n    let setValue = (newValue)=>{\n        if (props.isDisabled || props.isReadOnly) return;\n        let validKeys = Object.keys(validSegments);\n        let allKeys = Object.keys(allSegments);\n        // if all the segments are completed or a timefield with everything but am/pm set the time, also ignore when am/pm cleared\n        if (newValue == null) {\n            setDate(null);\n            setPlaceholderDate((0, $35a22f14a1f04b11$export$66aa2b09de4b1ea5)(props.placeholderValue, granularity, calendar, defaultTimeZone));\n            setValidSegments({});\n        } else if (validKeys.length >= allKeys.length || validKeys.length === allKeys.length - 1 && allSegments.dayPeriod && !validSegments.dayPeriod && clearedSegment.current !== \"dayPeriod\") {\n            // The display calendar should not have any effect on the emitted value.\n            // Emit dates in the same calendar as the original value, if any, otherwise gregorian.\n            newValue = (0, _internationalized_date__WEBPACK_IMPORTED_MODULE_1__.toCalendar)(newValue, (v === null || v === void 0 ? void 0 : v.calendar) || new (0, _internationalized_date__WEBPACK_IMPORTED_MODULE_1__.GregorianCalendar)());\n            setDate(newValue);\n        } else setPlaceholderDate(newValue);\n        clearedSegment.current = null;\n    };\n    let dateValue = (0, react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>displayValue.toDate(timeZone), [\n        displayValue,\n        timeZone\n    ]);\n    let segments = (0, react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>dateFormatter.formatToParts(dateValue).map((segment)=>{\n            let isEditable = $3c0fc76039f1c516$var$EDITABLE_SEGMENTS[segment.type];\n            if (segment.type === \"era\" && calendar.getEras().length === 1) isEditable = false;\n            let isPlaceholder = $3c0fc76039f1c516$var$EDITABLE_SEGMENTS[segment.type] && !validSegments[segment.type];\n            let placeholder = $3c0fc76039f1c516$var$EDITABLE_SEGMENTS[segment.type] ? (0, $3e3ed55ab2966714$export$d3f5c5e0a5023fa0)(segment.type, segment.value, locale) : null;\n            return {\n                type: $3c0fc76039f1c516$var$TYPE_MAPPING[segment.type] || segment.type,\n                text: isPlaceholder ? placeholder : segment.value,\n                ...$3c0fc76039f1c516$var$getSegmentLimits(displayValue, segment.type, resolvedOptions),\n                isPlaceholder: isPlaceholder,\n                placeholder: placeholder,\n                isEditable: isEditable\n            };\n        }), [\n        dateValue,\n        validSegments,\n        dateFormatter,\n        resolvedOptions,\n        displayValue,\n        calendar,\n        locale\n    ]);\n    // When the era field appears, mark it valid if the year field is already valid.\n    // If the era field disappears, remove it from the valid segments.\n    if (allSegments.era && validSegments.year && !validSegments.era) {\n        validSegments.era = true;\n        setValidSegments({\n            ...validSegments\n        });\n    } else if (!allSegments.era && validSegments.era) {\n        delete validSegments.era;\n        setValidSegments({\n            ...validSegments\n        });\n    }\n    let markValid = (part)=>{\n        validSegments[part] = true;\n        if (part === \"year\" && allSegments.era) validSegments.era = true;\n        setValidSegments({\n            ...validSegments\n        });\n    };\n    let adjustSegment = (type, amount)=>{\n        if (!validSegments[type]) {\n            markValid(type);\n            let validKeys = Object.keys(validSegments);\n            let allKeys = Object.keys(allSegments);\n            if (validKeys.length >= allKeys.length || validKeys.length === allKeys.length - 1 && allSegments.dayPeriod && !validSegments.dayPeriod) setValue(displayValue);\n        } else setValue($3c0fc76039f1c516$var$addSegment(displayValue, type, amount, resolvedOptions));\n    };\n    let isValueInvalid = props.isInvalid || props.validationState === \"invalid\" || (0, $35a22f14a1f04b11$export$eac50920cf2fd59a)(calendarValue, props.minValue, props.maxValue);\n    let validationState = props.validationState || (isValueInvalid ? \"invalid\" : null);\n    var _props_maxGranularity1;\n    return {\n        value: calendarValue,\n        dateValue: dateValue,\n        calendar: calendar,\n        setValue: setValue,\n        segments: segments,\n        dateFormatter: dateFormatter,\n        validationState: validationState,\n        isInvalid: isValueInvalid,\n        granularity: granularity,\n        maxGranularity: (_props_maxGranularity1 = props.maxGranularity) !== null && _props_maxGranularity1 !== void 0 ? _props_maxGranularity1 : \"year\",\n        isDisabled: isDisabled,\n        isReadOnly: isReadOnly,\n        isRequired: isRequired,\n        increment (part) {\n            adjustSegment(part, 1);\n        },\n        decrement (part) {\n            adjustSegment(part, -1);\n        },\n        incrementPage (part) {\n            adjustSegment(part, $3c0fc76039f1c516$var$PAGE_STEP[part] || 1);\n        },\n        decrementPage (part) {\n            adjustSegment(part, -($3c0fc76039f1c516$var$PAGE_STEP[part] || 1));\n        },\n        setSegment (part, v) {\n            markValid(part);\n            setValue($3c0fc76039f1c516$var$setSegment(displayValue, part, v, resolvedOptions));\n        },\n        confirmPlaceholder () {\n            if (props.isDisabled || props.isReadOnly) return;\n            // Confirm the placeholder if only the day period is not filled in.\n            let validKeys = Object.keys(validSegments);\n            let allKeys = Object.keys(allSegments);\n            if (validKeys.length === allKeys.length - 1 && allSegments.dayPeriod && !validSegments.dayPeriod) {\n                validSegments = {\n                    ...allSegments\n                };\n                setValidSegments(validSegments);\n                setValue(displayValue.copy());\n            }\n        },\n        clearSegment (part) {\n            delete validSegments[part];\n            clearedSegment.current = part;\n            setValidSegments({\n                ...validSegments\n            });\n            let placeholder = (0, $35a22f14a1f04b11$export$66aa2b09de4b1ea5)(props.placeholderValue, granularity, calendar, defaultTimeZone);\n            let value = displayValue;\n            // Reset day period to default without changing the hour.\n            if (part === \"dayPeriod\" && \"hour\" in displayValue && \"hour\" in placeholder) {\n                let isPM = displayValue.hour >= 12;\n                let shouldBePM = placeholder.hour >= 12;\n                if (isPM && !shouldBePM) value = displayValue.set({\n                    hour: displayValue.hour - 12\n                });\n                else if (!isPM && shouldBePM) value = displayValue.set({\n                    hour: displayValue.hour + 12\n                });\n            } else if (part in displayValue) value = displayValue.set({\n                [part]: placeholder[part]\n            });\n            setDate(null);\n            setValue(value);\n        },\n        formatValue (fieldOptions) {\n            if (!calendarValue) return \"\";\n            let formatOptions = (0, $35a22f14a1f04b11$export$7e319ea407e63bc0)(fieldOptions, formatOpts);\n            let formatter = new (0, _internationalized_date__WEBPACK_IMPORTED_MODULE_1__.DateFormatter)(locale, formatOptions);\n            return formatter.format(dateValue);\n        }\n    };\n}\nfunction $3c0fc76039f1c516$var$getSegmentLimits(date, type, options) {\n    switch(type){\n        case \"era\":\n            {\n                let eras = date.calendar.getEras();\n                return {\n                    value: eras.indexOf(date.era),\n                    minValue: 0,\n                    maxValue: eras.length - 1\n                };\n            }\n        case \"year\":\n            return {\n                value: date.year,\n                minValue: 1,\n                maxValue: date.calendar.getYearsInEra(date)\n            };\n        case \"month\":\n            return {\n                value: date.month,\n                minValue: (0, _internationalized_date__WEBPACK_IMPORTED_MODULE_1__.getMinimumMonthInYear)(date),\n                maxValue: date.calendar.getMonthsInYear(date)\n            };\n        case \"day\":\n            return {\n                value: date.day,\n                minValue: (0, _internationalized_date__WEBPACK_IMPORTED_MODULE_1__.getMinimumDayInMonth)(date),\n                maxValue: date.calendar.getDaysInMonth(date)\n            };\n    }\n    if (\"hour\" in date) switch(type){\n        case \"dayPeriod\":\n            return {\n                value: date.hour >= 12 ? 12 : 0,\n                minValue: 0,\n                maxValue: 12\n            };\n        case \"hour\":\n            if (options.hour12) {\n                let isPM = date.hour >= 12;\n                return {\n                    value: date.hour,\n                    minValue: isPM ? 12 : 0,\n                    maxValue: isPM ? 23 : 11\n                };\n            }\n            return {\n                value: date.hour,\n                minValue: 0,\n                maxValue: 23\n            };\n        case \"minute\":\n            return {\n                value: date.minute,\n                minValue: 0,\n                maxValue: 59\n            };\n        case \"second\":\n            return {\n                value: date.second,\n                minValue: 0,\n                maxValue: 59\n            };\n    }\n    return {};\n}\nfunction $3c0fc76039f1c516$var$addSegment(value, part, amount, options) {\n    switch(part){\n        case \"era\":\n        case \"year\":\n        case \"month\":\n        case \"day\":\n            return value.cycle(part, amount, {\n                round: part === \"year\"\n            });\n    }\n    if (\"hour\" in value) switch(part){\n        case \"dayPeriod\":\n            {\n                let hours = value.hour;\n                let isPM = hours >= 12;\n                return value.set({\n                    hour: isPM ? hours - 12 : hours + 12\n                });\n            }\n        case \"hour\":\n        case \"minute\":\n        case \"second\":\n            return value.cycle(part, amount, {\n                round: part !== \"hour\",\n                hourCycle: options.hour12 ? 12 : 24\n            });\n    }\n}\nfunction $3c0fc76039f1c516$var$setSegment(value, part, segmentValue, options) {\n    switch(part){\n        case \"day\":\n        case \"month\":\n        case \"year\":\n        case \"era\":\n            return value.set({\n                [part]: segmentValue\n            });\n    }\n    if (\"hour\" in value) switch(part){\n        case \"dayPeriod\":\n            {\n                let hours = value.hour;\n                let wasPM = hours >= 12;\n                let isPM = segmentValue >= 12;\n                if (isPM === wasPM) return value;\n                return value.set({\n                    hour: wasPM ? hours - 12 : hours + 12\n                });\n            }\n        case \"hour\":\n            // In 12 hour time, ensure that AM/PM does not change\n            if (options.hour12) {\n                let hours = value.hour;\n                let wasPM = hours >= 12;\n                if (!wasPM && segmentValue === 12) segmentValue = 0;\n                if (wasPM && segmentValue < 12) segmentValue += 12;\n            }\n        // fallthrough\n        case \"minute\":\n        case \"second\":\n            return value.set({\n                [part]: segmentValue\n            });\n    }\n}\n\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ \n\n\n\n\nfunction $93c38a5e28be6249$export$e50a61c1de9f574(props) {\n    var _props_isDateUnavailable, _props_isDateUnavailable1;\n    let overlayState = (0, _react_stately_overlays__WEBPACK_IMPORTED_MODULE_2__.useOverlayTriggerState)(props);\n    let [controlledValue, setControlledValue] = (0, _react_stately_utils__WEBPACK_IMPORTED_MODULE_3__.useControlledState)(props.value, props.defaultValue || null, props.onChange);\n    let [placeholderValue, setPlaceholderValue] = (0, react__WEBPACK_IMPORTED_MODULE_0__.useState)(()=>controlledValue || {\n            start: null,\n            end: null\n        });\n    // Reset the placeholder if the value prop is set to null.\n    if (controlledValue == null && placeholderValue.start && placeholderValue.end) {\n        placeholderValue = {\n            start: null,\n            end: null\n        };\n        setPlaceholderValue(placeholderValue);\n    }\n    let value = controlledValue || placeholderValue;\n    let setValue = (value)=>{\n        setPlaceholderValue(value || {\n            start: null,\n            end: null\n        });\n        if ((value === null || value === void 0 ? void 0 : value.start) && value.end) setControlledValue(value);\n        else setControlledValue(null);\n    };\n    let v = (value === null || value === void 0 ? void 0 : value.start) || (value === null || value === void 0 ? void 0 : value.end) || props.placeholderValue;\n    let [granularity] = (0, $35a22f14a1f04b11$export$2440da353cedad43)(v, props.granularity);\n    let hasTime = granularity === \"hour\" || granularity === \"minute\" || granularity === \"second\";\n    var _props_shouldCloseOnSelect;\n    let shouldCloseOnSelect = (_props_shouldCloseOnSelect = props.shouldCloseOnSelect) !== null && _props_shouldCloseOnSelect !== void 0 ? _props_shouldCloseOnSelect : true;\n    let [dateRange, setSelectedDateRange] = (0, react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    let [timeRange, setSelectedTimeRange] = (0, react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    if (value && value.start && value.end) {\n        dateRange = value;\n        if (\"hour\" in value.start) timeRange = value;\n    }\n    let commitValue = (dateRange, timeRange)=>{\n        setValue({\n            start: \"timeZone\" in timeRange.start ? timeRange.start.set((0, _internationalized_date__WEBPACK_IMPORTED_MODULE_1__.toCalendarDate)(dateRange.start)) : (0, _internationalized_date__WEBPACK_IMPORTED_MODULE_1__.toCalendarDateTime)(dateRange.start, timeRange.start),\n            end: \"timeZone\" in timeRange.end ? timeRange.end.set((0, _internationalized_date__WEBPACK_IMPORTED_MODULE_1__.toCalendarDate)(dateRange.end)) : (0, _internationalized_date__WEBPACK_IMPORTED_MODULE_1__.toCalendarDateTime)(dateRange.end, timeRange.end)\n        });\n        setSelectedDateRange(null);\n        setSelectedTimeRange(null);\n    };\n    // Intercept setValue to make sure the Time section is not changed by date selection in Calendar\n    let setDateRange = (range)=>{\n        let shouldClose = typeof shouldCloseOnSelect === \"function\" ? shouldCloseOnSelect() : shouldCloseOnSelect;\n        if (hasTime) {\n            if (shouldClose || range.start && range.end && (timeRange === null || timeRange === void 0 ? void 0 : timeRange.start) && (timeRange === null || timeRange === void 0 ? void 0 : timeRange.end)) commitValue(range, {\n                start: (timeRange === null || timeRange === void 0 ? void 0 : timeRange.start) || (0, $35a22f14a1f04b11$export$c5221a78ef73c5e9)(props.placeholderValue),\n                end: (timeRange === null || timeRange === void 0 ? void 0 : timeRange.end) || (0, $35a22f14a1f04b11$export$c5221a78ef73c5e9)(props.placeholderValue)\n            });\n            else setSelectedDateRange(range);\n        } else if (range.start && range.end) setValue(range);\n        else setSelectedDateRange(range);\n        if (shouldClose) overlayState.setOpen(false);\n    };\n    let setTimeRange = (range)=>{\n        if ((dateRange === null || dateRange === void 0 ? void 0 : dateRange.start) && (dateRange === null || dateRange === void 0 ? void 0 : dateRange.end) && range.start && range.end) commitValue(dateRange, range);\n        else setSelectedTimeRange(range);\n    };\n    let isValueInvalid = props.isInvalid || props.validationState === \"invalid\" || value != null && ((0, $35a22f14a1f04b11$export$eac50920cf2fd59a)(value.start, props.minValue, props.maxValue) || (0, $35a22f14a1f04b11$export$eac50920cf2fd59a)(value.end, props.minValue, props.maxValue) || value.end != null && value.start != null && value.end.compare(value.start) < 0 || (value === null || value === void 0 ? void 0 : value.start) && ((_props_isDateUnavailable = props.isDateUnavailable) === null || _props_isDateUnavailable === void 0 ? void 0 : _props_isDateUnavailable.call(props, value.start)) || (value === null || value === void 0 ? void 0 : value.end) && ((_props_isDateUnavailable1 = props.isDateUnavailable) === null || _props_isDateUnavailable1 === void 0 ? void 0 : _props_isDateUnavailable1.call(props, value.end)));\n    let validationState = props.validationState || (isValueInvalid ? \"invalid\" : null);\n    return {\n        value: value,\n        setValue: setValue,\n        dateRange: dateRange,\n        timeRange: timeRange,\n        granularity: granularity,\n        hasTime: hasTime,\n        setDate (part, date) {\n            setDateRange({\n                ...dateRange,\n                [part]: date\n            });\n        },\n        setTime (part, time) {\n            setTimeRange({\n                ...timeRange,\n                [part]: time\n            });\n        },\n        setDateTime (part, dateTime) {\n            setValue({\n                ...value,\n                [part]: dateTime\n            });\n        },\n        setDateRange: setDateRange,\n        setTimeRange: setTimeRange,\n        ...overlayState,\n        setOpen (isOpen) {\n            // Commit the selected date range when the calendar is closed. Use a placeholder time if one wasn't set.\n            // If only the time range was set and not the date range, don't commit. The state will be preserved until\n            // the user opens the popover again.\n            if (!isOpen && !((value === null || value === void 0 ? void 0 : value.start) && (value === null || value === void 0 ? void 0 : value.end)) && (dateRange === null || dateRange === void 0 ? void 0 : dateRange.start) && (dateRange === null || dateRange === void 0 ? void 0 : dateRange.end) && hasTime) commitValue(dateRange, {\n                start: (timeRange === null || timeRange === void 0 ? void 0 : timeRange.start) || (0, $35a22f14a1f04b11$export$c5221a78ef73c5e9)(props.placeholderValue),\n                end: (timeRange === null || timeRange === void 0 ? void 0 : timeRange.end) || (0, $35a22f14a1f04b11$export$c5221a78ef73c5e9)(props.placeholderValue)\n            });\n            overlayState.setOpen(isOpen);\n        },\n        validationState: validationState,\n        isInvalid: isValueInvalid,\n        formatValue (locale, fieldOptions) {\n            if (!value || !value.start || !value.end) return null;\n            let startTimeZone = \"timeZone\" in value.start ? value.start.timeZone : undefined;\n            let startGranularity = props.granularity || (value.start && \"minute\" in value.start ? \"minute\" : \"day\");\n            let endTimeZone = \"timeZone\" in value.end ? value.end.timeZone : undefined;\n            let endGranularity = props.granularity || (value.end && \"minute\" in value.end ? \"minute\" : \"day\");\n            let startOptions = (0, $35a22f14a1f04b11$export$7e319ea407e63bc0)(fieldOptions, {\n                granularity: startGranularity,\n                timeZone: startTimeZone,\n                hideTimeZone: props.hideTimeZone,\n                hourCycle: props.hourCycle,\n                showEra: value.start.calendar.identifier === \"gregory\" && value.start.era === \"BC\" || value.end.calendar.identifier === \"gregory\" && value.end.era === \"BC\"\n            });\n            let startDate = value.start.toDate(startTimeZone || \"UTC\");\n            let endDate = value.end.toDate(endTimeZone || \"UTC\");\n            let startFormatter = new (0, _internationalized_date__WEBPACK_IMPORTED_MODULE_1__.DateFormatter)(locale, startOptions);\n            let endFormatter;\n            if (startTimeZone === endTimeZone && startGranularity === endGranularity && value.start.compare(value.end) !== 0) {\n                // Use formatRange, as it results in shorter output when some of the fields\n                // are shared between the start and end dates (e.g. the same month).\n                // Formatting will fail if the end date is before the start date. Fall back below when that happens.\n                try {\n                    let parts = startFormatter.formatRangeToParts(startDate, endDate);\n                    // Find the separator between the start and end date. This is determined\n                    // by finding the last shared literal before the end range.\n                    let separatorIndex = -1;\n                    for(let i = 0; i < parts.length; i++){\n                        let part = parts[i];\n                        if (part.source === \"shared\" && part.type === \"literal\") separatorIndex = i;\n                        else if (part.source === \"endRange\") break;\n                    }\n                    // Now we can combine the parts into start and end strings.\n                    let start = \"\";\n                    let end = \"\";\n                    for(let i = 0; i < parts.length; i++){\n                        if (i < separatorIndex) start += parts[i].value;\n                        else if (i > separatorIndex) end += parts[i].value;\n                    }\n                    return {\n                        start: start,\n                        end: end\n                    };\n                } catch (e) {\n                // ignore\n                }\n                endFormatter = startFormatter;\n            } else {\n                let endOptions = (0, $35a22f14a1f04b11$export$7e319ea407e63bc0)(fieldOptions, {\n                    granularity: endGranularity,\n                    timeZone: endTimeZone,\n                    hideTimeZone: props.hideTimeZone,\n                    hourCycle: props.hourCycle\n                });\n                endFormatter = new (0, _internationalized_date__WEBPACK_IMPORTED_MODULE_1__.DateFormatter)(locale, endOptions);\n            }\n            return {\n                start: startFormatter.format(startDate),\n                end: endFormatter.format(endDate)\n            };\n        }\n    };\n}\n\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ \n\n\n\nfunction $eff5d8ee529ac4bb$export$fd53cef0cc796101(props) {\n    let { placeholderValue: placeholderValue = new (0, _internationalized_date__WEBPACK_IMPORTED_MODULE_1__.Time)(), minValue: minValue, maxValue: maxValue, granularity: granularity } = props;\n    let [value, setValue] = (0, _react_stately_utils__WEBPACK_IMPORTED_MODULE_3__.useControlledState)(props.value, props.defaultValue, props.onChange);\n    let v = value || placeholderValue;\n    let day = v && \"day\" in v ? v : undefined;\n    let defaultValueTimeZone = props.defaultValue && \"timeZone\" in props.defaultValue ? props.defaultValue.timeZone : undefined;\n    let placeholderDate = (0, react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{\n        let valueTimeZone = v && \"timeZone\" in v ? v.timeZone : undefined;\n        return (valueTimeZone || defaultValueTimeZone) && placeholderValue ? (0, _internationalized_date__WEBPACK_IMPORTED_MODULE_1__.toZoned)($eff5d8ee529ac4bb$var$convertValue(placeholderValue), valueTimeZone || defaultValueTimeZone) : $eff5d8ee529ac4bb$var$convertValue(placeholderValue);\n    }, [\n        placeholderValue,\n        v,\n        defaultValueTimeZone\n    ]);\n    let minDate = (0, react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>$eff5d8ee529ac4bb$var$convertValue(minValue, day), [\n        minValue,\n        day\n    ]);\n    let maxDate = (0, react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>$eff5d8ee529ac4bb$var$convertValue(maxValue, day), [\n        maxValue,\n        day\n    ]);\n    let timeValue = (0, react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>value && \"day\" in value ? (0, _internationalized_date__WEBPACK_IMPORTED_MODULE_1__.toTime)(value) : value, [\n        value\n    ]);\n    let dateTime = (0, react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>value == null ? null : $eff5d8ee529ac4bb$var$convertValue(value), [\n        value\n    ]);\n    let onChange = (newValue)=>{\n        setValue(day || defaultValueTimeZone ? newValue : newValue && (0, _internationalized_date__WEBPACK_IMPORTED_MODULE_1__.toTime)(newValue));\n    };\n    let state = (0, $3c0fc76039f1c516$export$60e84778edff6d26)({\n        ...props,\n        value: dateTime,\n        defaultValue: undefined,\n        minValue: minDate,\n        maxValue: maxDate,\n        onChange: onChange,\n        granularity: granularity || \"minute\",\n        maxGranularity: \"hour\",\n        placeholderValue: placeholderDate,\n        // Calendar should not matter for time fields.\n        createCalendar: ()=>new (0, _internationalized_date__WEBPACK_IMPORTED_MODULE_1__.GregorianCalendar)()\n    });\n    return {\n        ...state,\n        timeValue: timeValue\n    };\n}\nfunction $eff5d8ee529ac4bb$var$convertValue(value, date = (0, _internationalized_date__WEBPACK_IMPORTED_MODULE_1__.today)((0, _internationalized_date__WEBPACK_IMPORTED_MODULE_1__.getLocalTimeZone)())) {\n    if (!value) return null;\n    if (\"day\" in value) return value;\n    return (0, _internationalized_date__WEBPACK_IMPORTED_MODULE_1__.toCalendarDateTime)(date, value);\n}\n\n\n\n\n\n//# sourceMappingURL=module.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHJlYWN0LXN0YXRlbHkvZGF0ZXBpY2tlci9kaXN0L2ltcG9ydC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQW9nQjtBQUNwYTtBQUNYO0FBQ2dEO0FBQzdCOztBQUV4RztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUssSUFBSTtBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQix5REFBVztBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsK0RBQWlCO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQiwrREFBaUIsTUFBTSx3REFBVTtBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCwrRkFBK0YsbUVBQXFCO0FBQ3BILDhCQUE4Qix1RUFBeUI7QUFDdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdDQUF3QywyQ0FBZTtBQUN2RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7OztBQU1BO0FBQ0E7QUFDQSwyQkFBMkIsMkVBQTZCO0FBQ3hELGdDQUFnQyxvRUFBeUI7QUFDekQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQThDLDJDQUFlO0FBQzdELDhDQUE4QywyQ0FBZTtBQUM3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1EQUFtRCxtRUFBcUIsZUFBZSx1RUFBeUI7QUFDaEg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYixvQ0FBb0Msa0VBQW9CO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtREFBbUQsZ0ZBQWdDO0FBQ25GO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7O0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVUscUpBQXFKO0FBQy9KO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IsMENBQWMsY0FBYyxrRUFBb0I7QUFDL0U7QUFDQTtBQUNBLHVCQUF1QiwwQ0FBYztBQUNyQztBQUNBO0FBQ0E7QUFDQSwrQkFBK0Isb0VBQXlCO0FBQ3hELDRCQUE0QiwwQ0FBYztBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRCwyQ0FBZTtBQUNuRTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsMENBQWM7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQiwwQ0FBYyx1REFBdUQ7QUFDeEY7QUFDQTtBQUNBLDRCQUE0QiwwQ0FBYyxjQUFjLGtFQUFvQjtBQUM1RTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsMENBQWM7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEIsMENBQWMsMkpBQTJKO0FBQ25NO0FBQ0E7QUFDQSxnREFBZ0QsMkNBQWU7QUFDL0Q7QUFDQSxVQUFVLElBQUk7QUFDZCw2QkFBNkIseUNBQWE7QUFDMUM7QUFDQSxxQ0FBcUMseUNBQWE7QUFDbEQsUUFBUSw0Q0FBZ0I7QUFDeEI7QUFDQTtBQUNBLDBGQUEwRiwrREFBaUI7QUFDM0c7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQjtBQUMvQixVQUFVO0FBQ1Y7QUFDQTtBQUNBLDJCQUEyQiwrREFBaUIsMEVBQTBFLHNFQUF3QjtBQUM5STtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0Esd0JBQXdCLDBDQUFjO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QiwwQ0FBYztBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsY0FBYztBQUNkO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DLGtFQUFvQjtBQUN4RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsMEVBQTRCO0FBQzFEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIseUVBQTJCO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7O0FBS0E7QUFDQTtBQUNBLDJCQUEyQiwyRUFBNkI7QUFDeEQsb0RBQW9ELG9FQUF5QjtBQUM3RSxzREFBc0QsMkNBQWU7QUFDckU7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0RBQWdELDJDQUFlO0FBQy9ELGdEQUFnRCwyQ0FBZTtBQUMvRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyRUFBMkUsbUVBQXFCLDBCQUEwQix1RUFBeUI7QUFDbkoscUVBQXFFLG1FQUFxQix3QkFBd0IsdUVBQXlCO0FBQzNJLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYixTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLHlDQUF5QyxrRUFBb0I7QUFDN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUMsa0JBQWtCO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DLGtCQUFrQjtBQUNyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQix1Q0FBdUMsa0VBQW9CO0FBQzNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUFJQTtBQUNBLFVBQVUsNkNBQTZDLHlEQUFXLHdFQUF3RTtBQUMxSSxnQ0FBZ0Msb0VBQXlCO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QiwwQ0FBYztBQUM1QztBQUNBLGlGQUFpRiw0REFBYztBQUMvRixLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0IsMENBQWM7QUFDcEM7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLDBDQUFjO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QiwwQ0FBYyxvQ0FBb0MsMkRBQWE7QUFDdkY7QUFDQTtBQUNBLHVCQUF1QiwwQ0FBYztBQUNyQztBQUNBO0FBQ0E7QUFDQSwwRUFBMEUsMkRBQWE7QUFDdkY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DLHNFQUF3QjtBQUM1RCxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhEQUE4RCwwREFBWSxNQUFNLHFFQUF1QjtBQUN2RztBQUNBO0FBQ0EsZUFBZSx1RUFBeUI7QUFDeEM7Ozs7O0FBSzhRO0FBQzlRIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWVkdXNhLW5leHQvLi9ub2RlX21vZHVsZXMvQHJlYWN0LXN0YXRlbHkvZGF0ZXBpY2tlci9kaXN0L2ltcG9ydC5tanM/NzhiYSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge3RvQ2FsZW5kYXJEYXRlIGFzICQ3VXpvTSR0b0NhbGVuZGFyRGF0ZSwgdG9DYWxlbmRhckRhdGVUaW1lIGFzICQ3VXpvTSR0b0NhbGVuZGFyRGF0ZVRpbWUsIERhdGVGb3JtYXR0ZXIgYXMgJDdVem9NJERhdGVGb3JtYXR0ZXIsIFRpbWUgYXMgJDdVem9NJFRpbWUsIHRvQ2FsZW5kYXIgYXMgJDdVem9NJHRvQ2FsZW5kYXIsIG5vdyBhcyAkN1V6b00kbm93LCBHcmVnb3JpYW5DYWxlbmRhciBhcyAkN1V6b00kR3JlZ29yaWFuQ2FsZW5kYXIsIGdldE1pbmltdW1Nb250aEluWWVhciBhcyAkN1V6b00kZ2V0TWluaW11bU1vbnRoSW5ZZWFyLCBnZXRNaW5pbXVtRGF5SW5Nb250aCBhcyAkN1V6b00kZ2V0TWluaW11bURheUluTW9udGgsIHRvWm9uZWQgYXMgJDdVem9NJHRvWm9uZWQsIHRvVGltZSBhcyAkN1V6b00kdG9UaW1lLCB0b2RheSBhcyAkN1V6b00kdG9kYXksIGdldExvY2FsVGltZVpvbmUgYXMgJDdVem9NJGdldExvY2FsVGltZVpvbmV9IGZyb20gXCJAaW50ZXJuYXRpb25hbGl6ZWQvZGF0ZVwiO1xuaW1wb3J0IHt1c2VPdmVybGF5VHJpZ2dlclN0YXRlIGFzICQ3VXpvTSR1c2VPdmVybGF5VHJpZ2dlclN0YXRlfSBmcm9tIFwiQHJlYWN0LXN0YXRlbHkvb3ZlcmxheXNcIjtcbmltcG9ydCB7dXNlQ29udHJvbGxlZFN0YXRlIGFzICQ3VXpvTSR1c2VDb250cm9sbGVkU3RhdGV9IGZyb20gXCJAcmVhY3Qtc3RhdGVseS91dGlsc1wiO1xuaW1wb3J0IHt1c2VTdGF0ZSBhcyAkN1V6b00kdXNlU3RhdGUsIHVzZU1lbW8gYXMgJDdVem9NJHVzZU1lbW8sIHVzZVJlZiBhcyAkN1V6b00kdXNlUmVmLCB1c2VFZmZlY3QgYXMgJDdVem9NJHVzZUVmZmVjdH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQge0xvY2FsaXplZFN0cmluZ0RpY3Rpb25hcnkgYXMgJDdVem9NJExvY2FsaXplZFN0cmluZ0RpY3Rpb25hcnl9IGZyb20gXCJAaW50ZXJuYXRpb25hbGl6ZWQvc3RyaW5nXCI7XG5cbi8qXG4gKiBDb3B5cmlnaHQgMjAyMCBBZG9iZS4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFRoaXMgZmlsZSBpcyBsaWNlbnNlZCB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4gWW91IG1heSBvYnRhaW4gYSBjb3B5XG4gKiBvZiB0aGUgTGljZW5zZSBhdCBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyXG4gKiB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBSRVBSRVNFTlRBVElPTlNcbiAqIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZVxuICogZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqLyAvKlxuICogQ29weXJpZ2h0IDIwMjAgQWRvYmUuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBUaGlzIGZpbGUgaXMgbGljZW5zZWQgdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuIFlvdSBtYXkgb2J0YWluIGEgY29weVxuICogb2YgdGhlIExpY2Vuc2UgYXQgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlclxuICogdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgUkVQUkVTRU5UQVRJT05TXG4gKiBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2VcbiAqIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi8gXG4vKlxuICogQ29weXJpZ2h0IDIwMjAgQWRvYmUuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBUaGlzIGZpbGUgaXMgbGljZW5zZWQgdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuIFlvdSBtYXkgb2J0YWluIGEgY29weVxuICogb2YgdGhlIExpY2Vuc2UgYXQgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlclxuICogdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgUkVQUkVTRU5UQVRJT05TXG4gKiBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2VcbiAqIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi8gXG5cbmZ1bmN0aW9uICQzNWEyMmYxNGExZjA0YjExJGV4cG9ydCRlYWM1MDkyMGNmMmZkNTlhKHZhbHVlLCBtaW5WYWx1ZSwgbWF4VmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiAobWluVmFsdWUgIT0gbnVsbCAmJiB2YWx1ZS5jb21wYXJlKG1pblZhbHVlKSA8IDAgfHwgbWF4VmFsdWUgIT0gbnVsbCAmJiB2YWx1ZS5jb21wYXJlKG1heFZhbHVlKSA+IDApO1xufVxuY29uc3QgJDM1YTIyZjE0YTFmMDRiMTEkdmFyJERFRkFVTFRfRklFTERfT1BUSU9OUyA9IHtcbiAgICB5ZWFyOiBcIm51bWVyaWNcIixcbiAgICBtb250aDogXCJudW1lcmljXCIsXG4gICAgZGF5OiBcIm51bWVyaWNcIixcbiAgICBob3VyOiBcIm51bWVyaWNcIixcbiAgICBtaW51dGU6IFwiMi1kaWdpdFwiLFxuICAgIHNlY29uZDogXCIyLWRpZ2l0XCJcbn07XG5jb25zdCAkMzVhMjJmMTRhMWYwNGIxMSR2YXIkVFdPX0RJR0lUX0ZJRUxEX09QVElPTlMgPSB7XG4gICAgeWVhcjogXCJudW1lcmljXCIsXG4gICAgbW9udGg6IFwiMi1kaWdpdFwiLFxuICAgIGRheTogXCIyLWRpZ2l0XCIsXG4gICAgaG91cjogXCIyLWRpZ2l0XCIsXG4gICAgbWludXRlOiBcIjItZGlnaXRcIixcbiAgICBzZWNvbmQ6IFwiMi1kaWdpdFwiXG59O1xuZnVuY3Rpb24gJDM1YTIyZjE0YTFmMDRiMTEkZXhwb3J0JDdlMzE5ZWE0MDdlNjNiYzAoZmllbGRPcHRpb25zLCBvcHRpb25zKSB7XG4gICAgbGV0IGRlZmF1bHRGaWVsZE9wdGlvbnMgPSBvcHRpb25zLnNob3VsZEZvcmNlTGVhZGluZ1plcm9zID8gJDM1YTIyZjE0YTFmMDRiMTEkdmFyJFRXT19ESUdJVF9GSUVMRF9PUFRJT05TIDogJDM1YTIyZjE0YTFmMDRiMTEkdmFyJERFRkFVTFRfRklFTERfT1BUSU9OUztcbiAgICBmaWVsZE9wdGlvbnMgPSB7XG4gICAgICAgIC4uLmRlZmF1bHRGaWVsZE9wdGlvbnMsXG4gICAgICAgIC4uLmZpZWxkT3B0aW9uc1xuICAgIH07XG4gICAgbGV0IGdyYW51bGFyaXR5ID0gb3B0aW9ucy5ncmFudWxhcml0eSB8fCBcIm1pbnV0ZVwiO1xuICAgIGxldCBrZXlzID0gT2JqZWN0LmtleXMoZmllbGRPcHRpb25zKTtcbiAgICB2YXIgX29wdGlvbnNfbWF4R3JhbnVsYXJpdHk7XG4gICAgbGV0IHN0YXJ0SWR4ID0ga2V5cy5pbmRleE9mKChfb3B0aW9uc19tYXhHcmFudWxhcml0eSA9IG9wdGlvbnMubWF4R3JhbnVsYXJpdHkpICE9PSBudWxsICYmIF9vcHRpb25zX21heEdyYW51bGFyaXR5ICE9PSB2b2lkIDAgPyBfb3B0aW9uc19tYXhHcmFudWxhcml0eSA6IFwieWVhclwiKTtcbiAgICBpZiAoc3RhcnRJZHggPCAwKSBzdGFydElkeCA9IDA7XG4gICAgbGV0IGVuZElkeCA9IGtleXMuaW5kZXhPZihncmFudWxhcml0eSk7XG4gICAgaWYgKGVuZElkeCA8IDApIGVuZElkeCA9IDI7XG4gICAgaWYgKHN0YXJ0SWR4ID4gZW5kSWR4KSB0aHJvdyBuZXcgRXJyb3IoXCJtYXhHcmFudWxhcml0eSBtdXN0IGJlIGdyZWF0ZXIgdGhhbiBncmFudWxhcml0eVwiKTtcbiAgICBsZXQgb3B0cyA9IGtleXMuc2xpY2Uoc3RhcnRJZHgsIGVuZElkeCArIDEpLnJlZHVjZSgob3B0cywga2V5KT0+e1xuICAgICAgICBvcHRzW2tleV0gPSBmaWVsZE9wdGlvbnNba2V5XTtcbiAgICAgICAgcmV0dXJuIG9wdHM7XG4gICAgfSwge30pO1xuICAgIGlmIChvcHRpb25zLmhvdXJDeWNsZSAhPSBudWxsKSBvcHRzLmhvdXIxMiA9IG9wdGlvbnMuaG91ckN5Y2xlID09PSAxMjtcbiAgICBvcHRzLnRpbWVab25lID0gb3B0aW9ucy50aW1lWm9uZSB8fCBcIlVUQ1wiO1xuICAgIGxldCBoYXNUaW1lID0gZ3JhbnVsYXJpdHkgPT09IFwiaG91clwiIHx8IGdyYW51bGFyaXR5ID09PSBcIm1pbnV0ZVwiIHx8IGdyYW51bGFyaXR5ID09PSBcInNlY29uZFwiO1xuICAgIGlmIChoYXNUaW1lICYmIG9wdGlvbnMudGltZVpvbmUgJiYgIW9wdGlvbnMuaGlkZVRpbWVab25lKSBvcHRzLnRpbWVab25lTmFtZSA9IFwic2hvcnRcIjtcbiAgICBpZiAob3B0aW9ucy5zaG93RXJhICYmIHN0YXJ0SWR4ID09PSAwKSBvcHRzLmVyYSA9IFwic2hvcnRcIjtcbiAgICByZXR1cm4gb3B0cztcbn1cbmZ1bmN0aW9uICQzNWEyMmYxNGExZjA0YjExJGV4cG9ydCRjNTIyMWE3OGVmNzNjNWU5KHBsYWNlaG9sZGVyVmFsdWUpIHtcbiAgICBpZiAocGxhY2Vob2xkZXJWYWx1ZSAmJiBcImhvdXJcIiBpbiBwbGFjZWhvbGRlclZhbHVlKSByZXR1cm4gcGxhY2Vob2xkZXJWYWx1ZTtcbiAgICByZXR1cm4gbmV3ICgwLCAkN1V6b00kVGltZSkoKTtcbn1cbmZ1bmN0aW9uICQzNWEyMmYxNGExZjA0YjExJGV4cG9ydCQ2MWE0OTBhODBjNTUyNTUwKHZhbHVlLCBjYWxlbmRhcikge1xuICAgIGlmICh2YWx1ZSA9PT0gbnVsbCkgcmV0dXJuIG51bGw7XG4gICAgaWYgKCF2YWx1ZSkgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICByZXR1cm4gKDAsICQ3VXpvTSR0b0NhbGVuZGFyKSh2YWx1ZSwgY2FsZW5kYXIpO1xufVxuZnVuY3Rpb24gJDM1YTIyZjE0YTFmMDRiMTEkZXhwb3J0JDY2YWEyYjA5ZGU0YjFlYTUocGxhY2Vob2xkZXJWYWx1ZSwgZ3JhbnVsYXJpdHksIGNhbGVuZGFyLCB0aW1lWm9uZSkge1xuICAgIGlmIChwbGFjZWhvbGRlclZhbHVlKSByZXR1cm4gJDM1YTIyZjE0YTFmMDRiMTEkZXhwb3J0JDYxYTQ5MGE4MGM1NTI1NTAocGxhY2Vob2xkZXJWYWx1ZSwgY2FsZW5kYXIpO1xuICAgIGxldCBkYXRlID0gKDAsICQ3VXpvTSR0b0NhbGVuZGFyKSgoMCwgJDdVem9NJG5vdykodGltZVpvbmUpLnNldCh7XG4gICAgICAgIGhvdXI6IDAsXG4gICAgICAgIG1pbnV0ZTogMCxcbiAgICAgICAgc2Vjb25kOiAwLFxuICAgICAgICBtaWxsaXNlY29uZDogMFxuICAgIH0pLCBjYWxlbmRhcik7XG4gICAgaWYgKGdyYW51bGFyaXR5ID09PSBcInllYXJcIiB8fCBncmFudWxhcml0eSA9PT0gXCJtb250aFwiIHx8IGdyYW51bGFyaXR5ID09PSBcImRheVwiKSByZXR1cm4gKDAsICQ3VXpvTSR0b0NhbGVuZGFyRGF0ZSkoZGF0ZSk7XG4gICAgaWYgKCF0aW1lWm9uZSkgcmV0dXJuICgwLCAkN1V6b00kdG9DYWxlbmRhckRhdGVUaW1lKShkYXRlKTtcbiAgICByZXR1cm4gZGF0ZTtcbn1cbmZ1bmN0aW9uICQzNWEyMmYxNGExZjA0YjExJGV4cG9ydCQyNDQwZGEzNTNjZWRhZDQzKHYsIGdyYW51bGFyaXR5KSB7XG4gICAgLy8gQ29tcHV0ZSBkZWZhdWx0IGdyYW51bGFyaXR5IGFuZCB0aW1lIHpvbmUgZnJvbSB0aGUgdmFsdWUuIElmIHRoZSB2YWx1ZSBiZWNvbWVzIG51bGwsIGtlZXAgdGhlIGxhc3QgdmFsdWVzLlxuICAgIGxldCBkZWZhdWx0VGltZVpvbmUgPSB2ICYmIFwidGltZVpvbmVcIiBpbiB2ID8gdi50aW1lWm9uZSA6IHVuZGVmaW5lZDtcbiAgICBsZXQgZGVmYXVsdEdyYW51bGFyaXR5ID0gdiAmJiBcIm1pbnV0ZVwiIGluIHYgPyBcIm1pbnV0ZVwiIDogXCJkYXlcIjtcbiAgICAvLyBwcm9wcy5ncmFudWxhcml0eSBtdXN0IGFjdHVhbGx5IGV4aXN0IGluIHRoZSB2YWx1ZSBpZiBvbmUgaXMgcHJvdmlkZWQuXG4gICAgaWYgKHYgJiYgZ3JhbnVsYXJpdHkgJiYgIShncmFudWxhcml0eSBpbiB2KSkgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBncmFudWxhcml0eSBcIiArIGdyYW51bGFyaXR5ICsgXCIgZm9yIHZhbHVlIFwiICsgdi50b1N0cmluZygpKTtcbiAgICBsZXQgW2xhc3RWYWx1ZSwgc2V0TGFzdFZhbHVlXSA9ICgwLCAkN1V6b00kdXNlU3RhdGUpKFtcbiAgICAgICAgZGVmYXVsdEdyYW51bGFyaXR5LFxuICAgICAgICBkZWZhdWx0VGltZVpvbmVcbiAgICBdKTtcbiAgICAvLyBJZiB0aGUgZ3JhbnVsYXJpdHkgb3IgdGltZSB6b25lIGNoYW5nZWQsIHVwZGF0ZSB0aGUgbGFzdCB2YWx1ZS5cbiAgICBpZiAodiAmJiAobGFzdFZhbHVlWzBdICE9PSBkZWZhdWx0R3JhbnVsYXJpdHkgfHwgbGFzdFZhbHVlWzFdICE9PSBkZWZhdWx0VGltZVpvbmUpKSBzZXRMYXN0VmFsdWUoW1xuICAgICAgICBkZWZhdWx0R3JhbnVsYXJpdHksXG4gICAgICAgIGRlZmF1bHRUaW1lWm9uZVxuICAgIF0pO1xuICAgIGlmICghZ3JhbnVsYXJpdHkpIGdyYW51bGFyaXR5ID0gdiA/IGRlZmF1bHRHcmFudWxhcml0eSA6IGxhc3RWYWx1ZVswXTtcbiAgICBsZXQgdGltZVpvbmUgPSB2ID8gZGVmYXVsdFRpbWVab25lIDogbGFzdFZhbHVlWzFdO1xuICAgIHJldHVybiBbXG4gICAgICAgIGdyYW51bGFyaXR5LFxuICAgICAgICB0aW1lWm9uZVxuICAgIF07XG59XG5cblxuXG5cblxuZnVuY3Rpb24gJGFiNWJmM2Y2MTgwOTAzODkkZXhwb3J0JDg3MTk0YmIzNzhjYzNhYzIocHJvcHMpIHtcbiAgICB2YXIgX3Byb3BzX2lzRGF0ZVVuYXZhaWxhYmxlO1xuICAgIGxldCBvdmVybGF5U3RhdGUgPSAoMCwgJDdVem9NJHVzZU92ZXJsYXlUcmlnZ2VyU3RhdGUpKHByb3BzKTtcbiAgICBsZXQgW3ZhbHVlLCBzZXRWYWx1ZV0gPSAoMCwgJDdVem9NJHVzZUNvbnRyb2xsZWRTdGF0ZSkocHJvcHMudmFsdWUsIHByb3BzLmRlZmF1bHRWYWx1ZSB8fCBudWxsLCBwcm9wcy5vbkNoYW5nZSk7XG4gICAgbGV0IHYgPSB2YWx1ZSB8fCBwcm9wcy5wbGFjZWhvbGRlclZhbHVlO1xuICAgIGxldCBbZ3JhbnVsYXJpdHksIGRlZmF1bHRUaW1lWm9uZV0gPSAoMCwgJDM1YTIyZjE0YTFmMDRiMTEkZXhwb3J0JDI0NDBkYTM1M2NlZGFkNDMpKHYsIHByb3BzLmdyYW51bGFyaXR5KTtcbiAgICBsZXQgZGF0ZVZhbHVlID0gdmFsdWUgIT0gbnVsbCA/IHZhbHVlLnRvRGF0ZShkZWZhdWx0VGltZVpvbmUgIT09IG51bGwgJiYgZGVmYXVsdFRpbWVab25lICE9PSB2b2lkIDAgPyBkZWZhdWx0VGltZVpvbmUgOiBcIlVUQ1wiKSA6IG51bGw7XG4gICAgbGV0IGhhc1RpbWUgPSBncmFudWxhcml0eSA9PT0gXCJob3VyXCIgfHwgZ3JhbnVsYXJpdHkgPT09IFwibWludXRlXCIgfHwgZ3JhbnVsYXJpdHkgPT09IFwic2Vjb25kXCI7XG4gICAgdmFyIF9wcm9wc19zaG91bGRDbG9zZU9uU2VsZWN0O1xuICAgIGxldCBzaG91bGRDbG9zZU9uU2VsZWN0ID0gKF9wcm9wc19zaG91bGRDbG9zZU9uU2VsZWN0ID0gcHJvcHMuc2hvdWxkQ2xvc2VPblNlbGVjdCkgIT09IG51bGwgJiYgX3Byb3BzX3Nob3VsZENsb3NlT25TZWxlY3QgIT09IHZvaWQgMCA/IF9wcm9wc19zaG91bGRDbG9zZU9uU2VsZWN0IDogdHJ1ZTtcbiAgICBsZXQgW3NlbGVjdGVkRGF0ZSwgc2V0U2VsZWN0ZWREYXRlXSA9ICgwLCAkN1V6b00kdXNlU3RhdGUpKG51bGwpO1xuICAgIGxldCBbc2VsZWN0ZWRUaW1lLCBzZXRTZWxlY3RlZFRpbWVdID0gKDAsICQ3VXpvTSR1c2VTdGF0ZSkobnVsbCk7XG4gICAgaWYgKHZhbHVlKSB7XG4gICAgICAgIHNlbGVjdGVkRGF0ZSA9IHZhbHVlO1xuICAgICAgICBpZiAoXCJob3VyXCIgaW4gdmFsdWUpIHNlbGVjdGVkVGltZSA9IHZhbHVlO1xuICAgIH1cbiAgICAvLyBwcm9wcy5ncmFudWxhcml0eSBtdXN0IGFjdHVhbGx5IGV4aXN0IGluIHRoZSB2YWx1ZSBpZiBvbmUgaXMgcHJvdmlkZWQuXG4gICAgaWYgKHYgJiYgIShncmFudWxhcml0eSBpbiB2KSkgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBncmFudWxhcml0eSBcIiArIGdyYW51bGFyaXR5ICsgXCIgZm9yIHZhbHVlIFwiICsgdi50b1N0cmluZygpKTtcbiAgICBsZXQgY29tbWl0VmFsdWUgPSAoZGF0ZSwgdGltZSk9PntcbiAgICAgICAgc2V0VmFsdWUoXCJ0aW1lWm9uZVwiIGluIHRpbWUgPyB0aW1lLnNldCgoMCwgJDdVem9NJHRvQ2FsZW5kYXJEYXRlKShkYXRlKSkgOiAoMCwgJDdVem9NJHRvQ2FsZW5kYXJEYXRlVGltZSkoZGF0ZSwgdGltZSkpO1xuICAgICAgICBzZXRTZWxlY3RlZERhdGUobnVsbCk7XG4gICAgICAgIHNldFNlbGVjdGVkVGltZShudWxsKTtcbiAgICB9O1xuICAgIC8vIEludGVyY2VwdCBzZXRWYWx1ZSB0byBtYWtlIHN1cmUgdGhlIFRpbWUgc2VjdGlvbiBpcyBub3QgY2hhbmdlZCBieSBkYXRlIHNlbGVjdGlvbiBpbiBDYWxlbmRhclxuICAgIGxldCBzZWxlY3REYXRlID0gKG5ld1ZhbHVlKT0+e1xuICAgICAgICBsZXQgc2hvdWxkQ2xvc2UgPSB0eXBlb2Ygc2hvdWxkQ2xvc2VPblNlbGVjdCA9PT0gXCJmdW5jdGlvblwiID8gc2hvdWxkQ2xvc2VPblNlbGVjdCgpIDogc2hvdWxkQ2xvc2VPblNlbGVjdDtcbiAgICAgICAgaWYgKGhhc1RpbWUpIHtcbiAgICAgICAgICAgIGlmIChzZWxlY3RlZFRpbWUgfHwgc2hvdWxkQ2xvc2UpIGNvbW1pdFZhbHVlKG5ld1ZhbHVlLCBzZWxlY3RlZFRpbWUgfHwgKDAsICQzNWEyMmYxNGExZjA0YjExJGV4cG9ydCRjNTIyMWE3OGVmNzNjNWU5KShwcm9wcy5wbGFjZWhvbGRlclZhbHVlKSk7XG4gICAgICAgICAgICBlbHNlIHNldFNlbGVjdGVkRGF0ZShuZXdWYWx1ZSk7XG4gICAgICAgIH0gZWxzZSBzZXRWYWx1ZShuZXdWYWx1ZSk7XG4gICAgICAgIGlmIChzaG91bGRDbG9zZSkgb3ZlcmxheVN0YXRlLnNldE9wZW4oZmFsc2UpO1xuICAgIH07XG4gICAgbGV0IHNlbGVjdFRpbWUgPSAobmV3VmFsdWUpPT57XG4gICAgICAgIGlmIChzZWxlY3RlZERhdGUgJiYgbmV3VmFsdWUpIGNvbW1pdFZhbHVlKHNlbGVjdGVkRGF0ZSwgbmV3VmFsdWUpO1xuICAgICAgICBlbHNlIHNldFNlbGVjdGVkVGltZShuZXdWYWx1ZSk7XG4gICAgfTtcbiAgICBsZXQgaXNWYWx1ZUludmFsaWQgPSBwcm9wcy5pc0ludmFsaWQgfHwgcHJvcHMudmFsaWRhdGlvblN0YXRlID09PSBcImludmFsaWRcIiB8fCAoMCwgJDM1YTIyZjE0YTFmMDRiMTEkZXhwb3J0JGVhYzUwOTIwY2YyZmQ1OWEpKHZhbHVlLCBwcm9wcy5taW5WYWx1ZSwgcHJvcHMubWF4VmFsdWUpIHx8IHZhbHVlICYmICgoX3Byb3BzX2lzRGF0ZVVuYXZhaWxhYmxlID0gcHJvcHMuaXNEYXRlVW5hdmFpbGFibGUpID09PSBudWxsIHx8IF9wcm9wc19pc0RhdGVVbmF2YWlsYWJsZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3Byb3BzX2lzRGF0ZVVuYXZhaWxhYmxlLmNhbGwocHJvcHMsIHZhbHVlKSk7XG4gICAgbGV0IHZhbGlkYXRpb25TdGF0ZSA9IHByb3BzLnZhbGlkYXRpb25TdGF0ZSB8fCAoaXNWYWx1ZUludmFsaWQgPyBcImludmFsaWRcIiA6IG51bGwpO1xuICAgIHJldHVybiB7XG4gICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgc2V0VmFsdWU6IHNldFZhbHVlLFxuICAgICAgICBkYXRlVmFsdWU6IHNlbGVjdGVkRGF0ZSxcbiAgICAgICAgdGltZVZhbHVlOiBzZWxlY3RlZFRpbWUsXG4gICAgICAgIHNldERhdGVWYWx1ZTogc2VsZWN0RGF0ZSxcbiAgICAgICAgc2V0VGltZVZhbHVlOiBzZWxlY3RUaW1lLFxuICAgICAgICBncmFudWxhcml0eTogZ3JhbnVsYXJpdHksXG4gICAgICAgIGhhc1RpbWU6IGhhc1RpbWUsXG4gICAgICAgIC4uLm92ZXJsYXlTdGF0ZSxcbiAgICAgICAgc2V0T3BlbiAoaXNPcGVuKSB7XG4gICAgICAgICAgICAvLyBDb21taXQgdGhlIHNlbGVjdGVkIGRhdGUgd2hlbiB0aGUgY2FsZW5kYXIgaXMgY2xvc2VkLiBVc2UgYSBwbGFjZWhvbGRlciB0aW1lIGlmIG9uZSB3YXNuJ3Qgc2V0LlxuICAgICAgICAgICAgLy8gSWYgb25seSB0aGUgdGltZSB3YXMgc2V0IGFuZCBub3QgdGhlIGRhdGUsIGRvbid0IGNvbW1pdC4gVGhlIHN0YXRlIHdpbGwgYmUgcHJlc2VydmVkIHVudGlsXG4gICAgICAgICAgICAvLyB0aGUgdXNlciBvcGVucyB0aGUgcG9wb3ZlciBhZ2Fpbi5cbiAgICAgICAgICAgIGlmICghaXNPcGVuICYmICF2YWx1ZSAmJiBzZWxlY3RlZERhdGUgJiYgaGFzVGltZSkgY29tbWl0VmFsdWUoc2VsZWN0ZWREYXRlLCBzZWxlY3RlZFRpbWUgfHwgKDAsICQzNWEyMmYxNGExZjA0YjExJGV4cG9ydCRjNTIyMWE3OGVmNzNjNWU5KShwcm9wcy5wbGFjZWhvbGRlclZhbHVlKSk7XG4gICAgICAgICAgICBvdmVybGF5U3RhdGUuc2V0T3Blbihpc09wZW4pO1xuICAgICAgICB9LFxuICAgICAgICB2YWxpZGF0aW9uU3RhdGU6IHZhbGlkYXRpb25TdGF0ZSxcbiAgICAgICAgaXNJbnZhbGlkOiBpc1ZhbHVlSW52YWxpZCxcbiAgICAgICAgZm9ybWF0VmFsdWUgKGxvY2FsZSwgZmllbGRPcHRpb25zKSB7XG4gICAgICAgICAgICBpZiAoIWRhdGVWYWx1ZSkgcmV0dXJuIFwiXCI7XG4gICAgICAgICAgICBsZXQgZm9ybWF0T3B0aW9ucyA9ICgwLCAkMzVhMjJmMTRhMWYwNGIxMSRleHBvcnQkN2UzMTllYTQwN2U2M2JjMCkoZmllbGRPcHRpb25zLCB7XG4gICAgICAgICAgICAgICAgZ3JhbnVsYXJpdHk6IGdyYW51bGFyaXR5LFxuICAgICAgICAgICAgICAgIHRpbWVab25lOiBkZWZhdWx0VGltZVpvbmUsXG4gICAgICAgICAgICAgICAgaGlkZVRpbWVab25lOiBwcm9wcy5oaWRlVGltZVpvbmUsXG4gICAgICAgICAgICAgICAgaG91ckN5Y2xlOiBwcm9wcy5ob3VyQ3ljbGUsXG4gICAgICAgICAgICAgICAgc2hvd0VyYTogdmFsdWUuY2FsZW5kYXIuaWRlbnRpZmllciA9PT0gXCJncmVnb3J5XCIgJiYgdmFsdWUuZXJhID09PSBcIkJDXCJcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgbGV0IGZvcm1hdHRlciA9IG5ldyAoMCwgJDdVem9NJERhdGVGb3JtYXR0ZXIpKGxvY2FsZSwgZm9ybWF0T3B0aW9ucyk7XG4gICAgICAgICAgICByZXR1cm4gZm9ybWF0dGVyLmZvcm1hdChkYXRlVmFsdWUpO1xuICAgICAgICB9XG4gICAgfTtcbn1cblxuXG4vKlxuICogQ29weXJpZ2h0IDIwMjAgQWRvYmUuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBUaGlzIGZpbGUgaXMgbGljZW5zZWQgdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuIFlvdSBtYXkgb2J0YWluIGEgY29weVxuICogb2YgdGhlIExpY2Vuc2UgYXQgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlclxuICogdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgUkVQUkVTRU5UQVRJT05TXG4gKiBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2VcbiAqIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi8gXG5cbi8qXG4gKiBDb3B5cmlnaHQgMjAyMCBBZG9iZS4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFRoaXMgZmlsZSBpcyBsaWNlbnNlZCB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4gWW91IG1heSBvYnRhaW4gYSBjb3B5XG4gKiBvZiB0aGUgTGljZW5zZSBhdCBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyXG4gKiB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBSRVBSRVNFTlRBVElPTlNcbiAqIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZVxuICogZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqLyBcbi8vIFRoZXNlIHBsYWNlaG9sZGVycyBhcmUgYmFzZWQgb24gdGhlIHN0cmluZ3MgdXNlZCBieSB0aGUgPGlucHV0IHR5cGU9XCJkYXRlXCI+XG4vLyBpbXBsZW1lbnRhdGlvbnMgaW4gQ2hyb21lIGFuZCBGaXJlZm94LiBBZGRpdGlvbmFsIGxhbmd1YWdlcyBhcmUgc3VwcG9ydGVkXG4vLyBoZXJlIHRoYW4gUmVhY3QgU3BlY3RydW0ncyB0eXBpY2FsIHRyYW5zbGF0aW9ucy5cbmNvbnN0ICQzZTNlZDU1YWIyOTY2NzE0JHZhciRwbGFjZWhvbGRlcnMgPSBuZXcgKDAsICQ3VXpvTSRMb2NhbGl6ZWRTdHJpbmdEaWN0aW9uYXJ5KSh7XG4gICAgYWNoOiB7XG4gICAgICAgIHllYXI6IFwibXdha2FcIixcbiAgICAgICAgbW9udGg6IFwiZHdlXCIsXG4gICAgICAgIGRheTogXCJuaW5vXCJcbiAgICB9LFxuICAgIGFmOiB7XG4gICAgICAgIHllYXI6IFwiampqalwiLFxuICAgICAgICBtb250aDogXCJtbVwiLFxuICAgICAgICBkYXk6IFwiZGRcIlxuICAgIH0sXG4gICAgYW06IHtcbiAgICAgICAgeWVhcjogXCLhi5Phi5Phi5Phi5NcIixcbiAgICAgICAgbW9udGg6IFwi4Yia4YicXCIsXG4gICAgICAgIGRheTogXCLhiYDhiYBcIlxuICAgIH0sXG4gICAgYW46IHtcbiAgICAgICAgeWVhcjogXCJhYWFhXCIsXG4gICAgICAgIG1vbnRoOiBcIm1tXCIsXG4gICAgICAgIGRheTogXCJkZFwiXG4gICAgfSxcbiAgICBhcjoge1xuICAgICAgICB5ZWFyOiBcItiz2YbYqVwiLFxuICAgICAgICBtb250aDogXCLYtNmH2LFcIixcbiAgICAgICAgZGF5OiBcItmK2YjZhVwiXG4gICAgfSxcbiAgICBhc3Q6IHtcbiAgICAgICAgeWVhcjogXCJhYWFhXCIsXG4gICAgICAgIG1vbnRoOiBcIm1tXCIsXG4gICAgICAgIGRheTogXCJkZFwiXG4gICAgfSxcbiAgICBhejoge1xuICAgICAgICB5ZWFyOiBcImlpaWlcIixcbiAgICAgICAgbW9udGg6IFwiYWFcIixcbiAgICAgICAgZGF5OiBcImdnXCJcbiAgICB9LFxuICAgIGJlOiB7XG4gICAgICAgIHllYXI6IFwi0LPQs9Cz0LNcIixcbiAgICAgICAgbW9udGg6IFwi0LzQvFwiLFxuICAgICAgICBkYXk6IFwi0LTQtFwiXG4gICAgfSxcbiAgICBiZzoge1xuICAgICAgICB5ZWFyOiBcItCz0LPQs9CzXCIsXG4gICAgICAgIG1vbnRoOiBcItC80LxcIixcbiAgICAgICAgZGF5OiBcItC00LRcIlxuICAgIH0sXG4gICAgYm46IHtcbiAgICAgICAgeWVhcjogXCJ5eXl5XCIsXG4gICAgICAgIG1vbnRoOiBcIuCmruCmv+CmruCmv1wiLFxuICAgICAgICBkYXk6IFwiZGRcIlxuICAgIH0sXG4gICAgYnI6IHtcbiAgICAgICAgeWVhcjogXCJiYmJiXCIsXG4gICAgICAgIG1vbnRoOiBcIm1tXCIsXG4gICAgICAgIGRheTogXCJkZFwiXG4gICAgfSxcbiAgICBiczoge1xuICAgICAgICB5ZWFyOiBcImdnZ2dcIixcbiAgICAgICAgbW9udGg6IFwibW1cIixcbiAgICAgICAgZGF5OiBcImRkXCJcbiAgICB9LFxuICAgIGNhOiB7XG4gICAgICAgIHllYXI6IFwiYWFhYVwiLFxuICAgICAgICBtb250aDogXCJtbVwiLFxuICAgICAgICBkYXk6IFwiZGRcIlxuICAgIH0sXG4gICAgY2FrOiB7XG4gICAgICAgIHllYXI6IFwiampqalwiLFxuICAgICAgICBtb250aDogXCJpaVwiLFxuICAgICAgICBkYXk6IFwicSdxJ1wiXG4gICAgfSxcbiAgICBja2I6IHtcbiAgICAgICAgeWVhcjogXCLYs9in2rVcIixcbiAgICAgICAgbW9udGg6IFwi2YXYp9mG2q9cIixcbiAgICAgICAgZGF5OiBcItqV24bamFwiXG4gICAgfSxcbiAgICBjczoge1xuICAgICAgICB5ZWFyOiBcInJycnJcIixcbiAgICAgICAgbW9udGg6IFwibW1cIixcbiAgICAgICAgZGF5OiBcImRkXCJcbiAgICB9LFxuICAgIGN5OiB7XG4gICAgICAgIHllYXI6IFwiYmJiYlwiLFxuICAgICAgICBtb250aDogXCJtbVwiLFxuICAgICAgICBkYXk6IFwiZGRcIlxuICAgIH0sXG4gICAgZGE6IHtcbiAgICAgICAgeWVhcjogXCJcXHhlNVxceGU1XFx4ZTVcXHhlNVwiLFxuICAgICAgICBtb250aDogXCJtbVwiLFxuICAgICAgICBkYXk6IFwiZGRcIlxuICAgIH0sXG4gICAgZGU6IHtcbiAgICAgICAgeWVhcjogXCJqampqXCIsXG4gICAgICAgIG1vbnRoOiBcIm1tXCIsXG4gICAgICAgIGRheTogXCJ0dFwiXG4gICAgfSxcbiAgICBkc2I6IHtcbiAgICAgICAgeWVhcjogXCJsbGxsXCIsXG4gICAgICAgIG1vbnRoOiBcIm1tXCIsXG4gICAgICAgIGRheTogXCLFusW6XCJcbiAgICB9LFxuICAgIGVsOiB7XG4gICAgICAgIHllYXI6IFwizrXOtc61zrVcIixcbiAgICAgICAgbW9udGg6IFwizrzOvFwiLFxuICAgICAgICBkYXk6IFwizrfOt1wiXG4gICAgfSxcbiAgICBlbjoge1xuICAgICAgICB5ZWFyOiBcInl5eXlcIixcbiAgICAgICAgbW9udGg6IFwibW1cIixcbiAgICAgICAgZGF5OiBcImRkXCJcbiAgICB9LFxuICAgIGVvOiB7XG4gICAgICAgIHllYXI6IFwiampqalwiLFxuICAgICAgICBtb250aDogXCJtbVwiLFxuICAgICAgICBkYXk6IFwidHRcIlxuICAgIH0sXG4gICAgZXM6IHtcbiAgICAgICAgeWVhcjogXCJhYWFhXCIsXG4gICAgICAgIG1vbnRoOiBcIm1tXCIsXG4gICAgICAgIGRheTogXCJkZFwiXG4gICAgfSxcbiAgICBldDoge1xuICAgICAgICB5ZWFyOiBcImFhYWFcIixcbiAgICAgICAgbW9udGg6IFwia2tcIixcbiAgICAgICAgZGF5OiBcInBwXCJcbiAgICB9LFxuICAgIGV1OiB7XG4gICAgICAgIHllYXI6IFwidXV1dVwiLFxuICAgICAgICBtb250aDogXCJoaFwiLFxuICAgICAgICBkYXk6IFwiZWVcIlxuICAgIH0sXG4gICAgZmE6IHtcbiAgICAgICAgeWVhcjogXCLYs9in2YRcIixcbiAgICAgICAgbW9udGg6IFwi2YXYp9mHXCIsXG4gICAgICAgIGRheTogXCLYsdmI2LJcIlxuICAgIH0sXG4gICAgZmY6IHtcbiAgICAgICAgeWVhcjogXCJoaGhoXCIsXG4gICAgICAgIG1vbnRoOiBcImxsXCIsXG4gICAgICAgIGRheTogXCJcXHhmMVxceGYxXCJcbiAgICB9LFxuICAgIGZpOiB7XG4gICAgICAgIHllYXI6IFwidnZ2dlwiLFxuICAgICAgICBtb250aDogXCJra1wiLFxuICAgICAgICBkYXk6IFwicHBcIlxuICAgIH0sXG4gICAgZnI6IHtcbiAgICAgICAgeWVhcjogXCJhYWFhXCIsXG4gICAgICAgIG1vbnRoOiBcIm1tXCIsXG4gICAgICAgIGRheTogXCJqalwiXG4gICAgfSxcbiAgICBmeToge1xuICAgICAgICB5ZWFyOiBcImpqampcIixcbiAgICAgICAgbW9udGg6IFwibW1cIixcbiAgICAgICAgZGF5OiBcImRkXCJcbiAgICB9LFxuICAgIGdhOiB7XG4gICAgICAgIHllYXI6IFwiYmJiYlwiLFxuICAgICAgICBtb250aDogXCJtbVwiLFxuICAgICAgICBkYXk6IFwibGxcIlxuICAgIH0sXG4gICAgZ2Q6IHtcbiAgICAgICAgeWVhcjogXCJiYmJiXCIsXG4gICAgICAgIG1vbnRoOiBcIm1tXCIsXG4gICAgICAgIGRheTogXCJsbFwiXG4gICAgfSxcbiAgICBnbDoge1xuICAgICAgICB5ZWFyOiBcImFhYWFcIixcbiAgICAgICAgbW9udGg6IFwibW1cIixcbiAgICAgICAgZGF5OiBcImRkXCJcbiAgICB9LFxuICAgIGhlOiB7XG4gICAgICAgIHllYXI6IFwi16nXoNeUXCIsXG4gICAgICAgIG1vbnRoOiBcIteX15XXk9epXCIsXG4gICAgICAgIGRheTogXCLXmdeV151cIlxuICAgIH0sXG4gICAgaHI6IHtcbiAgICAgICAgeWVhcjogXCJnZ2dnXCIsXG4gICAgICAgIG1vbnRoOiBcIm1tXCIsXG4gICAgICAgIGRheTogXCJkZFwiXG4gICAgfSxcbiAgICBoc2I6IHtcbiAgICAgICAgeWVhcjogXCJsbGxsXCIsXG4gICAgICAgIG1vbnRoOiBcIm1tXCIsXG4gICAgICAgIGRheTogXCJkZFwiXG4gICAgfSxcbiAgICBodToge1xuICAgICAgICB5ZWFyOiBcIlxceGU5XFx4ZTlcXHhlOVxceGU5XCIsXG4gICAgICAgIG1vbnRoOiBcImhoXCIsXG4gICAgICAgIGRheTogXCJublwiXG4gICAgfSxcbiAgICBpYToge1xuICAgICAgICB5ZWFyOiBcImFhYWFcIixcbiAgICAgICAgbW9udGg6IFwibW1cIixcbiAgICAgICAgZGF5OiBcImRkXCJcbiAgICB9LFxuICAgIGlkOiB7XG4gICAgICAgIHllYXI6IFwidHR0dFwiLFxuICAgICAgICBtb250aDogXCJiYlwiLFxuICAgICAgICBkYXk6IFwiaGhcIlxuICAgIH0sXG4gICAgaXQ6IHtcbiAgICAgICAgeWVhcjogXCJhYWFhXCIsXG4gICAgICAgIG1vbnRoOiBcIm1tXCIsXG4gICAgICAgIGRheTogXCJnZ1wiXG4gICAgfSxcbiAgICBqYToge1xuICAgICAgICB5ZWFyOiBcIiDlubQgXCIsXG4gICAgICAgIG1vbnRoOiBcIuaciFwiLFxuICAgICAgICBkYXk6IFwi5pelXCJcbiAgICB9LFxuICAgIGthOiB7XG4gICAgICAgIHllYXI6IFwi4YOs4YOs4YOs4YOsXCIsXG4gICAgICAgIG1vbnRoOiBcIuGDl+GDl1wiLFxuICAgICAgICBkYXk6IFwi4YOg4YOgXCJcbiAgICB9LFxuICAgIGtrOiB7XG4gICAgICAgIHllYXI6IFwi0LbQttC20LZcIixcbiAgICAgICAgbW9udGg6IFwi0LDQsFwiLFxuICAgICAgICBkYXk6IFwi0LrQulwiXG4gICAgfSxcbiAgICBrbjoge1xuICAgICAgICB5ZWFyOiBcIuCyteCyteCyteCytVwiLFxuICAgICAgICBtb250aDogXCLgsq7gsr/gsq7gs4BcIixcbiAgICAgICAgZGF5OiBcIuCypuCyv+CypuCyv1wiXG4gICAgfSxcbiAgICBrbzoge1xuICAgICAgICB5ZWFyOiBcIuyXsOuPhFwiLFxuICAgICAgICBtb250aDogXCLsm5RcIixcbiAgICAgICAgZGF5OiBcIuydvFwiXG4gICAgfSxcbiAgICBsYjoge1xuICAgICAgICB5ZWFyOiBcImpqampcIixcbiAgICAgICAgbW9udGg6IFwibW1cIixcbiAgICAgICAgZGF5OiBcImRkXCJcbiAgICB9LFxuICAgIGxvOiB7XG4gICAgICAgIHllYXI6IFwi4Lqb4Lqb4Lqb4LqbXCIsXG4gICAgICAgIG1vbnRoOiBcIuC6lOC6lFwiLFxuICAgICAgICBkYXk6IFwi4Lqn4LqnXCJcbiAgICB9LFxuICAgIGx0OiB7XG4gICAgICAgIHllYXI6IFwibW1tbVwiLFxuICAgICAgICBtb250aDogXCJtbVwiLFxuICAgICAgICBkYXk6IFwiZGRcIlxuICAgIH0sXG4gICAgbHY6IHtcbiAgICAgICAgeWVhcjogXCJnZ2dnXCIsXG4gICAgICAgIG1vbnRoOiBcIm1tXCIsXG4gICAgICAgIGRheTogXCJkZFwiXG4gICAgfSxcbiAgICBtZWg6IHtcbiAgICAgICAgeWVhcjogXCJhYWFhXCIsXG4gICAgICAgIG1vbnRoOiBcIm1tXCIsXG4gICAgICAgIGRheTogXCJkZFwiXG4gICAgfSxcbiAgICBtbDoge1xuICAgICAgICB5ZWFyOiBcIuC0teC1vOC0t+C0glwiLFxuICAgICAgICBtb250aDogXCLgtK7gtL7gtLjgtIJcIixcbiAgICAgICAgZGF5OiBcIuC0pOC1gOC0r+C0pOC0v1wiXG4gICAgfSxcbiAgICBtczoge1xuICAgICAgICB5ZWFyOiBcInR0dHRcIixcbiAgICAgICAgbW9udGg6IFwibW1cIixcbiAgICAgICAgZGF5OiBcImhoXCJcbiAgICB9LFxuICAgIG5sOiB7XG4gICAgICAgIHllYXI6IFwiampqalwiLFxuICAgICAgICBtb250aDogXCJtbVwiLFxuICAgICAgICBkYXk6IFwiZGRcIlxuICAgIH0sXG4gICAgbm46IHtcbiAgICAgICAgeWVhcjogXCJcXHhlNVxceGU1XFx4ZTVcXHhlNVwiLFxuICAgICAgICBtb250aDogXCJtbVwiLFxuICAgICAgICBkYXk6IFwiZGRcIlxuICAgIH0sXG4gICAgbm86IHtcbiAgICAgICAgeWVhcjogXCJcXHhlNVxceGU1XFx4ZTVcXHhlNVwiLFxuICAgICAgICBtb250aDogXCJtbVwiLFxuICAgICAgICBkYXk6IFwiZGRcIlxuICAgIH0sXG4gICAgb2M6IHtcbiAgICAgICAgeWVhcjogXCJhYWFhXCIsXG4gICAgICAgIG1vbnRoOiBcIm1tXCIsXG4gICAgICAgIGRheTogXCJqalwiXG4gICAgfSxcbiAgICBwbDoge1xuICAgICAgICB5ZWFyOiBcInJycnJcIixcbiAgICAgICAgbW9udGg6IFwibW1cIixcbiAgICAgICAgZGF5OiBcImRkXCJcbiAgICB9LFxuICAgIHB0OiB7XG4gICAgICAgIHllYXI6IFwiYWFhYVwiLFxuICAgICAgICBtb250aDogXCJtbVwiLFxuICAgICAgICBkYXk6IFwiZGRcIlxuICAgIH0sXG4gICAgcm06IHtcbiAgICAgICAgeWVhcjogXCJvb29vXCIsXG4gICAgICAgIG1vbnRoOiBcIm1tXCIsXG4gICAgICAgIGRheTogXCJkZFwiXG4gICAgfSxcbiAgICBybzoge1xuICAgICAgICB5ZWFyOiBcImFhYWFcIixcbiAgICAgICAgbW9udGg6IFwibGxcIixcbiAgICAgICAgZGF5OiBcInp6XCJcbiAgICB9LFxuICAgIHJ1OiB7XG4gICAgICAgIHllYXI6IFwi0LPQs9Cz0LNcIixcbiAgICAgICAgbW9udGg6IFwi0LzQvFwiLFxuICAgICAgICBkYXk6IFwi0LTQtFwiXG4gICAgfSxcbiAgICBzYzoge1xuICAgICAgICB5ZWFyOiBcImFhYWFcIixcbiAgICAgICAgbW9udGg6IFwibW1cIixcbiAgICAgICAgZGF5OiBcImRkXCJcbiAgICB9LFxuICAgIHNjbjoge1xuICAgICAgICB5ZWFyOiBcImFhYWFcIixcbiAgICAgICAgbW9udGg6IFwibW1cIixcbiAgICAgICAgZGF5OiBcImpqXCJcbiAgICB9LFxuICAgIHNrOiB7XG4gICAgICAgIHllYXI6IFwicnJyclwiLFxuICAgICAgICBtb250aDogXCJtbVwiLFxuICAgICAgICBkYXk6IFwiZGRcIlxuICAgIH0sXG4gICAgc2w6IHtcbiAgICAgICAgeWVhcjogXCJsbGxsXCIsXG4gICAgICAgIG1vbnRoOiBcIm1tXCIsXG4gICAgICAgIGRheTogXCJkZFwiXG4gICAgfSxcbiAgICBzcjoge1xuICAgICAgICB5ZWFyOiBcItCz0LPQs9CzXCIsXG4gICAgICAgIG1vbnRoOiBcItC80LxcIixcbiAgICAgICAgZGF5OiBcItC00LRcIlxuICAgIH0sXG4gICAgc3Y6IHtcbiAgICAgICAgeWVhcjogXCJcXHhlNVxceGU1XFx4ZTVcXHhlNVwiLFxuICAgICAgICBtb250aDogXCJtbVwiLFxuICAgICAgICBkYXk6IFwiZGRcIlxuICAgIH0sXG4gICAgc3psOiB7XG4gICAgICAgIHllYXI6IFwicnJyclwiLFxuICAgICAgICBtb250aDogXCJtbVwiLFxuICAgICAgICBkYXk6IFwiZGRcIlxuICAgIH0sXG4gICAgdGc6IHtcbiAgICAgICAgeWVhcjogXCLRgdGB0YHRgVwiLFxuICAgICAgICBtb250aDogXCLQvNC8XCIsXG4gICAgICAgIGRheTogXCLRgNGAXCJcbiAgICB9LFxuICAgIHRoOiB7XG4gICAgICAgIHllYXI6IFwi4Lib4Lib4Lib4LibXCIsXG4gICAgICAgIG1vbnRoOiBcIuC4lOC4lFwiLFxuICAgICAgICBkYXk6IFwi4Lin4LinXCJcbiAgICB9LFxuICAgIHRyOiB7XG4gICAgICAgIHllYXI6IFwieXl5eVwiLFxuICAgICAgICBtb250aDogXCJhYVwiLFxuICAgICAgICBkYXk6IFwiZ2dcIlxuICAgIH0sXG4gICAgdWs6IHtcbiAgICAgICAgeWVhcjogXCLRgNGA0YDRgFwiLFxuICAgICAgICBtb250aDogXCLQvNC8XCIsXG4gICAgICAgIGRheTogXCLQtNC0XCJcbiAgICB9LFxuICAgIFwiemgtQ05cIjoge1xuICAgICAgICB5ZWFyOiBcIuW5tFwiLFxuICAgICAgICBtb250aDogXCLmnIhcIixcbiAgICAgICAgZGF5OiBcIuaXpVwiXG4gICAgfSxcbiAgICBcInpoLVRXXCI6IHtcbiAgICAgICAgeWVhcjogXCLlubRcIixcbiAgICAgICAgbW9udGg6IFwi5pyIXCIsXG4gICAgICAgIGRheTogXCLml6VcIlxuICAgIH1cbn0sIFwiZW5cIik7XG5mdW5jdGlvbiAkM2UzZWQ1NWFiMjk2NjcxNCRleHBvcnQkZDNmNWM1ZTBhNTAyM2ZhMChmaWVsZCwgdmFsdWUsIGxvY2FsZSkge1xuICAgIC8vIFVzZSB0aGUgYWN0dWFsIHBsYWNlaG9sZGVyIHZhbHVlIGZvciB0aGUgZXJhIGFuZCBkYXkgcGVyaW9kIGZpZWxkcy5cbiAgICBpZiAoZmllbGQgPT09IFwiZXJhXCIgfHwgZmllbGQgPT09IFwiZGF5UGVyaW9kXCIpIHJldHVybiB2YWx1ZTtcbiAgICBpZiAoZmllbGQgPT09IFwieWVhclwiIHx8IGZpZWxkID09PSBcIm1vbnRoXCIgfHwgZmllbGQgPT09IFwiZGF5XCIpIHJldHVybiAkM2UzZWQ1NWFiMjk2NjcxNCR2YXIkcGxhY2Vob2xkZXJzLmdldFN0cmluZ0ZvckxvY2FsZShmaWVsZCwgbG9jYWxlKTtcbiAgICAvLyBGb3IgdGltZSBmaWVsZHMgKGUuZy4gaG91ciwgbWludXRlLCBldGMuKSwgdXNlIHR3byBkYXNoZXMgYXMgdGhlIHBsYWNlaG9sZGVyLlxuICAgIHJldHVybiBcIuKAk+KAk1wiO1xufVxuXG5cblxuXG5jb25zdCAkM2MwZmM3NjAzOWYxYzUxNiR2YXIkRURJVEFCTEVfU0VHTUVOVFMgPSB7XG4gICAgeWVhcjogdHJ1ZSxcbiAgICBtb250aDogdHJ1ZSxcbiAgICBkYXk6IHRydWUsXG4gICAgaG91cjogdHJ1ZSxcbiAgICBtaW51dGU6IHRydWUsXG4gICAgc2Vjb25kOiB0cnVlLFxuICAgIGRheVBlcmlvZDogdHJ1ZSxcbiAgICBlcmE6IHRydWVcbn07XG5jb25zdCAkM2MwZmM3NjAzOWYxYzUxNiR2YXIkUEFHRV9TVEVQID0ge1xuICAgIHllYXI6IDUsXG4gICAgbW9udGg6IDIsXG4gICAgZGF5OiA3LFxuICAgIGhvdXI6IDIsXG4gICAgbWludXRlOiAxNSxcbiAgICBzZWNvbmQ6IDE1XG59O1xuLy8gTm9kZSBzZWVtcyB0byBjb252ZXJ0IGV2ZXJ5dGhpbmcgdG8gbG93ZXJjYXNlLi4uXG5jb25zdCAkM2MwZmM3NjAzOWYxYzUxNiR2YXIkVFlQRV9NQVBQSU5HID0ge1xuICAgIGRheXBlcmlvZDogXCJkYXlQZXJpb2RcIlxufTtcbmZ1bmN0aW9uICQzYzBmYzc2MDM5ZjFjNTE2JGV4cG9ydCQ2MGU4NDc3OGVkZmY2ZDI2KHByb3BzKSB7XG4gICAgbGV0IHsgbG9jYWxlOiBsb2NhbGUsIGNyZWF0ZUNhbGVuZGFyOiBjcmVhdGVDYWxlbmRhciwgaGlkZVRpbWVab25lOiBoaWRlVGltZVpvbmUsIGlzRGlzYWJsZWQ6IGlzRGlzYWJsZWQsIGlzUmVhZE9ubHk6IGlzUmVhZE9ubHksIGlzUmVxdWlyZWQ6IGlzUmVxdWlyZWQgfSA9IHByb3BzO1xuICAgIGxldCB2ID0gcHJvcHMudmFsdWUgfHwgcHJvcHMuZGVmYXVsdFZhbHVlIHx8IHByb3BzLnBsYWNlaG9sZGVyVmFsdWU7XG4gICAgbGV0IFtncmFudWxhcml0eSwgZGVmYXVsdFRpbWVab25lXSA9ICgwLCAkMzVhMjJmMTRhMWYwNGIxMSRleHBvcnQkMjQ0MGRhMzUzY2VkYWQ0MykodiwgcHJvcHMuZ3JhbnVsYXJpdHkpO1xuICAgIGxldCB0aW1lWm9uZSA9IGRlZmF1bHRUaW1lWm9uZSB8fCBcIlVUQ1wiO1xuICAgIC8vIHByb3BzLmdyYW51bGFyaXR5IG11c3QgYWN0dWFsbHkgZXhpc3QgaW4gdGhlIHZhbHVlIGlmIG9uZSBpcyBwcm92aWRlZC5cbiAgICBpZiAodiAmJiAhKGdyYW51bGFyaXR5IGluIHYpKSB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGdyYW51bGFyaXR5IFwiICsgZ3JhbnVsYXJpdHkgKyBcIiBmb3IgdmFsdWUgXCIgKyB2LnRvU3RyaW5nKCkpO1xuICAgIGxldCBkZWZhdWx0Rm9ybWF0dGVyID0gKDAsICQ3VXpvTSR1c2VNZW1vKSgoKT0+bmV3ICgwLCAkN1V6b00kRGF0ZUZvcm1hdHRlcikobG9jYWxlKSwgW1xuICAgICAgICBsb2NhbGVcbiAgICBdKTtcbiAgICBsZXQgY2FsZW5kYXIgPSAoMCwgJDdVem9NJHVzZU1lbW8pKCgpPT5jcmVhdGVDYWxlbmRhcihkZWZhdWx0Rm9ybWF0dGVyLnJlc29sdmVkT3B0aW9ucygpLmNhbGVuZGFyKSwgW1xuICAgICAgICBjcmVhdGVDYWxlbmRhcixcbiAgICAgICAgZGVmYXVsdEZvcm1hdHRlclxuICAgIF0pO1xuICAgIGxldCBbdmFsdWUsIHNldERhdGVdID0gKDAsICQ3VXpvTSR1c2VDb250cm9sbGVkU3RhdGUpKHByb3BzLnZhbHVlLCBwcm9wcy5kZWZhdWx0VmFsdWUsIHByb3BzLm9uQ2hhbmdlKTtcbiAgICBsZXQgY2FsZW5kYXJWYWx1ZSA9ICgwLCAkN1V6b00kdXNlTWVtbykoKCk9PigwLCAkMzVhMjJmMTRhMWYwNGIxMSRleHBvcnQkNjFhNDkwYTgwYzU1MjU1MCkodmFsdWUsIGNhbGVuZGFyKSwgW1xuICAgICAgICB2YWx1ZSxcbiAgICAgICAgY2FsZW5kYXJcbiAgICBdKTtcbiAgICAvLyBXZSBrZWVwIHRyYWNrIG9mIHRoZSBwbGFjZWhvbGRlciBkYXRlIHNlcGFyYXRlbHkgaW4gc3RhdGUgc28gdGhhdCBvbkNoYW5nZSBpcyBub3QgY2FsbGVkXG4gICAgLy8gdW50aWwgYWxsIHNlZ21lbnRzIGFyZSBzZXQuIElmIHRoZSB2YWx1ZSA9PT0gbnVsbCAobm90IHVuZGVmaW5lZCksIHRoZW4gYXNzdW1lIHRoZSBjb21wb25lbnRcbiAgICAvLyBpcyBjb250cm9sbGVkLCBzbyB1c2UgdGhlIHBsYWNlaG9sZGVyIGFzIHRoZSB2YWx1ZSB1bnRpbCBhbGwgc2VnbWVudHMgYXJlIGVudGVyZWQgc28gaXQgZG9lc24ndFxuICAgIC8vIGNoYW5nZSBmcm9tIHVuY29udHJvbGxlZCB0byBjb250cm9sbGVkIGFuZCBlbWl0IGEgd2FybmluZy5cbiAgICBsZXQgW3BsYWNlaG9sZGVyRGF0ZSwgc2V0UGxhY2Vob2xkZXJEYXRlXSA9ICgwLCAkN1V6b00kdXNlU3RhdGUpKCgpPT4oMCwgJDM1YTIyZjE0YTFmMDRiMTEkZXhwb3J0JDY2YWEyYjA5ZGU0YjFlYTUpKHByb3BzLnBsYWNlaG9sZGVyVmFsdWUsIGdyYW51bGFyaXR5LCBjYWxlbmRhciwgZGVmYXVsdFRpbWVab25lKSk7XG4gICAgbGV0IHZhbCA9IGNhbGVuZGFyVmFsdWUgfHwgcGxhY2Vob2xkZXJEYXRlO1xuICAgIGxldCBzaG93RXJhID0gY2FsZW5kYXIuaWRlbnRpZmllciA9PT0gXCJncmVnb3J5XCIgJiYgdmFsLmVyYSA9PT0gXCJCQ1wiO1xuICAgIHZhciBfcHJvcHNfbWF4R3JhbnVsYXJpdHk7XG4gICAgbGV0IGZvcm1hdE9wdHMgPSAoMCwgJDdVem9NJHVzZU1lbW8pKCgpPT4oe1xuICAgICAgICAgICAgZ3JhbnVsYXJpdHk6IGdyYW51bGFyaXR5LFxuICAgICAgICAgICAgbWF4R3JhbnVsYXJpdHk6IChfcHJvcHNfbWF4R3JhbnVsYXJpdHkgPSBwcm9wcy5tYXhHcmFudWxhcml0eSkgIT09IG51bGwgJiYgX3Byb3BzX21heEdyYW51bGFyaXR5ICE9PSB2b2lkIDAgPyBfcHJvcHNfbWF4R3JhbnVsYXJpdHkgOiBcInllYXJcIixcbiAgICAgICAgICAgIHRpbWVab25lOiBkZWZhdWx0VGltZVpvbmUsXG4gICAgICAgICAgICBoaWRlVGltZVpvbmU6IGhpZGVUaW1lWm9uZSxcbiAgICAgICAgICAgIGhvdXJDeWNsZTogcHJvcHMuaG91ckN5Y2xlLFxuICAgICAgICAgICAgc2hvd0VyYTogc2hvd0VyYSxcbiAgICAgICAgICAgIHNob3VsZEZvcmNlTGVhZGluZ1plcm9zOiBwcm9wcy5zaG91bGRGb3JjZUxlYWRpbmdaZXJvc1xuICAgICAgICB9KSwgW1xuICAgICAgICBwcm9wcy5tYXhHcmFudWxhcml0eSxcbiAgICAgICAgZ3JhbnVsYXJpdHksXG4gICAgICAgIHByb3BzLmhvdXJDeWNsZSxcbiAgICAgICAgcHJvcHMuc2hvdWxkRm9yY2VMZWFkaW5nWmVyb3MsXG4gICAgICAgIGRlZmF1bHRUaW1lWm9uZSxcbiAgICAgICAgaGlkZVRpbWVab25lLFxuICAgICAgICBzaG93RXJhXG4gICAgXSk7XG4gICAgbGV0IG9wdHMgPSAoMCwgJDdVem9NJHVzZU1lbW8pKCgpPT4oMCwgJDM1YTIyZjE0YTFmMDRiMTEkZXhwb3J0JDdlMzE5ZWE0MDdlNjNiYzApKHt9LCBmb3JtYXRPcHRzKSwgW1xuICAgICAgICBmb3JtYXRPcHRzXG4gICAgXSk7XG4gICAgbGV0IGRhdGVGb3JtYXR0ZXIgPSAoMCwgJDdVem9NJHVzZU1lbW8pKCgpPT5uZXcgKDAsICQ3VXpvTSREYXRlRm9ybWF0dGVyKShsb2NhbGUsIG9wdHMpLCBbXG4gICAgICAgIGxvY2FsZSxcbiAgICAgICAgb3B0c1xuICAgIF0pO1xuICAgIGxldCByZXNvbHZlZE9wdGlvbnMgPSAoMCwgJDdVem9NJHVzZU1lbW8pKCgpPT5kYXRlRm9ybWF0dGVyLnJlc29sdmVkT3B0aW9ucygpLCBbXG4gICAgICAgIGRhdGVGb3JtYXR0ZXJcbiAgICBdKTtcbiAgICAvLyBEZXRlcm1pbmUgaG93IG1hbnkgZWRpdGFibGUgc2VnbWVudHMgdGhlcmUgYXJlIGZvciB2YWxpZGF0aW9uIHB1cnBvc2VzLlxuICAgIC8vIFRoZSByZXN1bHQgaXMgY2FjaGVkIGZvciBwZXJmb3JtYW5jZS5cbiAgICBsZXQgYWxsU2VnbWVudHMgPSAoMCwgJDdVem9NJHVzZU1lbW8pKCgpPT5kYXRlRm9ybWF0dGVyLmZvcm1hdFRvUGFydHMobmV3IERhdGUoKSkuZmlsdGVyKChzZWcpPT4kM2MwZmM3NjAzOWYxYzUxNiR2YXIkRURJVEFCTEVfU0VHTUVOVFNbc2VnLnR5cGVdKS5yZWR1Y2UoKHAsIHNlZyk9PihwW3NlZy50eXBlXSA9IHRydWUsIHApLCB7fSksIFtcbiAgICAgICAgZGF0ZUZvcm1hdHRlclxuICAgIF0pO1xuICAgIGxldCBbdmFsaWRTZWdtZW50cywgc2V0VmFsaWRTZWdtZW50c10gPSAoMCwgJDdVem9NJHVzZVN0YXRlKSgoKT0+cHJvcHMudmFsdWUgfHwgcHJvcHMuZGVmYXVsdFZhbHVlID8ge1xuICAgICAgICAgICAgLi4uYWxsU2VnbWVudHNcbiAgICAgICAgfSA6IHt9KTtcbiAgICBsZXQgY2xlYXJlZFNlZ21lbnQgPSAoMCwgJDdVem9NJHVzZVJlZikoKTtcbiAgICAvLyBSZXNldCBwbGFjZWhvbGRlciB3aGVuIGNhbGVuZGFyIGNoYW5nZXNcbiAgICBsZXQgbGFzdENhbGVuZGFySWRlbnRpZmllciA9ICgwLCAkN1V6b00kdXNlUmVmKShjYWxlbmRhci5pZGVudGlmaWVyKTtcbiAgICAoMCwgJDdVem9NJHVzZUVmZmVjdCkoKCk9PntcbiAgICAgICAgaWYgKGNhbGVuZGFyLmlkZW50aWZpZXIgIT09IGxhc3RDYWxlbmRhcklkZW50aWZpZXIuY3VycmVudCkge1xuICAgICAgICAgICAgbGFzdENhbGVuZGFySWRlbnRpZmllci5jdXJyZW50ID0gY2FsZW5kYXIuaWRlbnRpZmllcjtcbiAgICAgICAgICAgIHNldFBsYWNlaG9sZGVyRGF0ZSgocGxhY2Vob2xkZXIpPT5PYmplY3Qua2V5cyh2YWxpZFNlZ21lbnRzKS5sZW5ndGggPiAwID8gKDAsICQ3VXpvTSR0b0NhbGVuZGFyKShwbGFjZWhvbGRlciwgY2FsZW5kYXIpIDogKDAsICQzNWEyMmYxNGExZjA0YjExJGV4cG9ydCQ2NmFhMmIwOWRlNGIxZWE1KShwcm9wcy5wbGFjZWhvbGRlclZhbHVlLCBncmFudWxhcml0eSwgY2FsZW5kYXIsIGRlZmF1bHRUaW1lWm9uZSkpO1xuICAgICAgICB9XG4gICAgfSwgW1xuICAgICAgICBjYWxlbmRhcixcbiAgICAgICAgZ3JhbnVsYXJpdHksXG4gICAgICAgIHZhbGlkU2VnbWVudHMsXG4gICAgICAgIGRlZmF1bHRUaW1lWm9uZSxcbiAgICAgICAgcHJvcHMucGxhY2Vob2xkZXJWYWx1ZVxuICAgIF0pO1xuICAgIC8vIElmIHRoZXJlIGlzIGEgdmFsdWUgcHJvcCwgYW5kIHNvbWUgc2VnbWVudHMgd2VyZSBwcmV2aW91c2x5IHBsYWNlaG9sZGVycywgbWFyayB0aGVtIGFsbCBhcyB2YWxpZC5cbiAgICBpZiAodmFsdWUgJiYgT2JqZWN0LmtleXModmFsaWRTZWdtZW50cykubGVuZ3RoIDwgT2JqZWN0LmtleXMoYWxsU2VnbWVudHMpLmxlbmd0aCkge1xuICAgICAgICB2YWxpZFNlZ21lbnRzID0ge1xuICAgICAgICAgICAgLi4uYWxsU2VnbWVudHNcbiAgICAgICAgfTtcbiAgICAgICAgc2V0VmFsaWRTZWdtZW50cyh2YWxpZFNlZ21lbnRzKTtcbiAgICB9XG4gICAgLy8gSWYgdGhlIHZhbHVlIGlzIHNldCB0byBudWxsIGFuZCBhbGwgc2VnbWVudHMgYXJlIHZhbGlkLCByZXNldCB0aGUgcGxhY2Vob2xkZXIuXG4gICAgaWYgKHZhbHVlID09IG51bGwgJiYgT2JqZWN0LmtleXModmFsaWRTZWdtZW50cykubGVuZ3RoID09PSBPYmplY3Qua2V5cyhhbGxTZWdtZW50cykubGVuZ3RoKSB7XG4gICAgICAgIHZhbGlkU2VnbWVudHMgPSB7fTtcbiAgICAgICAgc2V0VmFsaWRTZWdtZW50cyh2YWxpZFNlZ21lbnRzKTtcbiAgICAgICAgc2V0UGxhY2Vob2xkZXJEYXRlKCgwLCAkMzVhMjJmMTRhMWYwNGIxMSRleHBvcnQkNjZhYTJiMDlkZTRiMWVhNSkocHJvcHMucGxhY2Vob2xkZXJWYWx1ZSwgZ3JhbnVsYXJpdHksIGNhbGVuZGFyLCBkZWZhdWx0VGltZVpvbmUpKTtcbiAgICB9XG4gICAgLy8gSWYgYWxsIHNlZ21lbnRzIGFyZSB2YWxpZCwgdXNlIHRoZSBkYXRlIGZyb20gc3RhdGUsIG90aGVyd2lzZSB1c2UgdGhlIHBsYWNlaG9sZGVyIGRhdGUuXG4gICAgbGV0IGRpc3BsYXlWYWx1ZSA9IGNhbGVuZGFyVmFsdWUgJiYgT2JqZWN0LmtleXModmFsaWRTZWdtZW50cykubGVuZ3RoID49IE9iamVjdC5rZXlzKGFsbFNlZ21lbnRzKS5sZW5ndGggPyBjYWxlbmRhclZhbHVlIDogcGxhY2Vob2xkZXJEYXRlO1xuICAgIGxldCBzZXRWYWx1ZSA9IChuZXdWYWx1ZSk9PntcbiAgICAgICAgaWYgKHByb3BzLmlzRGlzYWJsZWQgfHwgcHJvcHMuaXNSZWFkT25seSkgcmV0dXJuO1xuICAgICAgICBsZXQgdmFsaWRLZXlzID0gT2JqZWN0LmtleXModmFsaWRTZWdtZW50cyk7XG4gICAgICAgIGxldCBhbGxLZXlzID0gT2JqZWN0LmtleXMoYWxsU2VnbWVudHMpO1xuICAgICAgICAvLyBpZiBhbGwgdGhlIHNlZ21lbnRzIGFyZSBjb21wbGV0ZWQgb3IgYSB0aW1lZmllbGQgd2l0aCBldmVyeXRoaW5nIGJ1dCBhbS9wbSBzZXQgdGhlIHRpbWUsIGFsc28gaWdub3JlIHdoZW4gYW0vcG0gY2xlYXJlZFxuICAgICAgICBpZiAobmV3VmFsdWUgPT0gbnVsbCkge1xuICAgICAgICAgICAgc2V0RGF0ZShudWxsKTtcbiAgICAgICAgICAgIHNldFBsYWNlaG9sZGVyRGF0ZSgoMCwgJDM1YTIyZjE0YTFmMDRiMTEkZXhwb3J0JDY2YWEyYjA5ZGU0YjFlYTUpKHByb3BzLnBsYWNlaG9sZGVyVmFsdWUsIGdyYW51bGFyaXR5LCBjYWxlbmRhciwgZGVmYXVsdFRpbWVab25lKSk7XG4gICAgICAgICAgICBzZXRWYWxpZFNlZ21lbnRzKHt9KTtcbiAgICAgICAgfSBlbHNlIGlmICh2YWxpZEtleXMubGVuZ3RoID49IGFsbEtleXMubGVuZ3RoIHx8IHZhbGlkS2V5cy5sZW5ndGggPT09IGFsbEtleXMubGVuZ3RoIC0gMSAmJiBhbGxTZWdtZW50cy5kYXlQZXJpb2QgJiYgIXZhbGlkU2VnbWVudHMuZGF5UGVyaW9kICYmIGNsZWFyZWRTZWdtZW50LmN1cnJlbnQgIT09IFwiZGF5UGVyaW9kXCIpIHtcbiAgICAgICAgICAgIC8vIFRoZSBkaXNwbGF5IGNhbGVuZGFyIHNob3VsZCBub3QgaGF2ZSBhbnkgZWZmZWN0IG9uIHRoZSBlbWl0dGVkIHZhbHVlLlxuICAgICAgICAgICAgLy8gRW1pdCBkYXRlcyBpbiB0aGUgc2FtZSBjYWxlbmRhciBhcyB0aGUgb3JpZ2luYWwgdmFsdWUsIGlmIGFueSwgb3RoZXJ3aXNlIGdyZWdvcmlhbi5cbiAgICAgICAgICAgIG5ld1ZhbHVlID0gKDAsICQ3VXpvTSR0b0NhbGVuZGFyKShuZXdWYWx1ZSwgKHYgPT09IG51bGwgfHwgdiA9PT0gdm9pZCAwID8gdm9pZCAwIDogdi5jYWxlbmRhcikgfHwgbmV3ICgwLCAkN1V6b00kR3JlZ29yaWFuQ2FsZW5kYXIpKCkpO1xuICAgICAgICAgICAgc2V0RGF0ZShuZXdWYWx1ZSk7XG4gICAgICAgIH0gZWxzZSBzZXRQbGFjZWhvbGRlckRhdGUobmV3VmFsdWUpO1xuICAgICAgICBjbGVhcmVkU2VnbWVudC5jdXJyZW50ID0gbnVsbDtcbiAgICB9O1xuICAgIGxldCBkYXRlVmFsdWUgPSAoMCwgJDdVem9NJHVzZU1lbW8pKCgpPT5kaXNwbGF5VmFsdWUudG9EYXRlKHRpbWVab25lKSwgW1xuICAgICAgICBkaXNwbGF5VmFsdWUsXG4gICAgICAgIHRpbWVab25lXG4gICAgXSk7XG4gICAgbGV0IHNlZ21lbnRzID0gKDAsICQ3VXpvTSR1c2VNZW1vKSgoKT0+ZGF0ZUZvcm1hdHRlci5mb3JtYXRUb1BhcnRzKGRhdGVWYWx1ZSkubWFwKChzZWdtZW50KT0+e1xuICAgICAgICAgICAgbGV0IGlzRWRpdGFibGUgPSAkM2MwZmM3NjAzOWYxYzUxNiR2YXIkRURJVEFCTEVfU0VHTUVOVFNbc2VnbWVudC50eXBlXTtcbiAgICAgICAgICAgIGlmIChzZWdtZW50LnR5cGUgPT09IFwiZXJhXCIgJiYgY2FsZW5kYXIuZ2V0RXJhcygpLmxlbmd0aCA9PT0gMSkgaXNFZGl0YWJsZSA9IGZhbHNlO1xuICAgICAgICAgICAgbGV0IGlzUGxhY2Vob2xkZXIgPSAkM2MwZmM3NjAzOWYxYzUxNiR2YXIkRURJVEFCTEVfU0VHTUVOVFNbc2VnbWVudC50eXBlXSAmJiAhdmFsaWRTZWdtZW50c1tzZWdtZW50LnR5cGVdO1xuICAgICAgICAgICAgbGV0IHBsYWNlaG9sZGVyID0gJDNjMGZjNzYwMzlmMWM1MTYkdmFyJEVESVRBQkxFX1NFR01FTlRTW3NlZ21lbnQudHlwZV0gPyAoMCwgJDNlM2VkNTVhYjI5NjY3MTQkZXhwb3J0JGQzZjVjNWUwYTUwMjNmYTApKHNlZ21lbnQudHlwZSwgc2VnbWVudC52YWx1ZSwgbG9jYWxlKSA6IG51bGw7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHR5cGU6ICQzYzBmYzc2MDM5ZjFjNTE2JHZhciRUWVBFX01BUFBJTkdbc2VnbWVudC50eXBlXSB8fCBzZWdtZW50LnR5cGUsXG4gICAgICAgICAgICAgICAgdGV4dDogaXNQbGFjZWhvbGRlciA/IHBsYWNlaG9sZGVyIDogc2VnbWVudC52YWx1ZSxcbiAgICAgICAgICAgICAgICAuLi4kM2MwZmM3NjAzOWYxYzUxNiR2YXIkZ2V0U2VnbWVudExpbWl0cyhkaXNwbGF5VmFsdWUsIHNlZ21lbnQudHlwZSwgcmVzb2x2ZWRPcHRpb25zKSxcbiAgICAgICAgICAgICAgICBpc1BsYWNlaG9sZGVyOiBpc1BsYWNlaG9sZGVyLFxuICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiBwbGFjZWhvbGRlcixcbiAgICAgICAgICAgICAgICBpc0VkaXRhYmxlOiBpc0VkaXRhYmxlXG4gICAgICAgICAgICB9O1xuICAgICAgICB9KSwgW1xuICAgICAgICBkYXRlVmFsdWUsXG4gICAgICAgIHZhbGlkU2VnbWVudHMsXG4gICAgICAgIGRhdGVGb3JtYXR0ZXIsXG4gICAgICAgIHJlc29sdmVkT3B0aW9ucyxcbiAgICAgICAgZGlzcGxheVZhbHVlLFxuICAgICAgICBjYWxlbmRhcixcbiAgICAgICAgbG9jYWxlXG4gICAgXSk7XG4gICAgLy8gV2hlbiB0aGUgZXJhIGZpZWxkIGFwcGVhcnMsIG1hcmsgaXQgdmFsaWQgaWYgdGhlIHllYXIgZmllbGQgaXMgYWxyZWFkeSB2YWxpZC5cbiAgICAvLyBJZiB0aGUgZXJhIGZpZWxkIGRpc2FwcGVhcnMsIHJlbW92ZSBpdCBmcm9tIHRoZSB2YWxpZCBzZWdtZW50cy5cbiAgICBpZiAoYWxsU2VnbWVudHMuZXJhICYmIHZhbGlkU2VnbWVudHMueWVhciAmJiAhdmFsaWRTZWdtZW50cy5lcmEpIHtcbiAgICAgICAgdmFsaWRTZWdtZW50cy5lcmEgPSB0cnVlO1xuICAgICAgICBzZXRWYWxpZFNlZ21lbnRzKHtcbiAgICAgICAgICAgIC4uLnZhbGlkU2VnbWVudHNcbiAgICAgICAgfSk7XG4gICAgfSBlbHNlIGlmICghYWxsU2VnbWVudHMuZXJhICYmIHZhbGlkU2VnbWVudHMuZXJhKSB7XG4gICAgICAgIGRlbGV0ZSB2YWxpZFNlZ21lbnRzLmVyYTtcbiAgICAgICAgc2V0VmFsaWRTZWdtZW50cyh7XG4gICAgICAgICAgICAuLi52YWxpZFNlZ21lbnRzXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBsZXQgbWFya1ZhbGlkID0gKHBhcnQpPT57XG4gICAgICAgIHZhbGlkU2VnbWVudHNbcGFydF0gPSB0cnVlO1xuICAgICAgICBpZiAocGFydCA9PT0gXCJ5ZWFyXCIgJiYgYWxsU2VnbWVudHMuZXJhKSB2YWxpZFNlZ21lbnRzLmVyYSA9IHRydWU7XG4gICAgICAgIHNldFZhbGlkU2VnbWVudHMoe1xuICAgICAgICAgICAgLi4udmFsaWRTZWdtZW50c1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIGxldCBhZGp1c3RTZWdtZW50ID0gKHR5cGUsIGFtb3VudCk9PntcbiAgICAgICAgaWYgKCF2YWxpZFNlZ21lbnRzW3R5cGVdKSB7XG4gICAgICAgICAgICBtYXJrVmFsaWQodHlwZSk7XG4gICAgICAgICAgICBsZXQgdmFsaWRLZXlzID0gT2JqZWN0LmtleXModmFsaWRTZWdtZW50cyk7XG4gICAgICAgICAgICBsZXQgYWxsS2V5cyA9IE9iamVjdC5rZXlzKGFsbFNlZ21lbnRzKTtcbiAgICAgICAgICAgIGlmICh2YWxpZEtleXMubGVuZ3RoID49IGFsbEtleXMubGVuZ3RoIHx8IHZhbGlkS2V5cy5sZW5ndGggPT09IGFsbEtleXMubGVuZ3RoIC0gMSAmJiBhbGxTZWdtZW50cy5kYXlQZXJpb2QgJiYgIXZhbGlkU2VnbWVudHMuZGF5UGVyaW9kKSBzZXRWYWx1ZShkaXNwbGF5VmFsdWUpO1xuICAgICAgICB9IGVsc2Ugc2V0VmFsdWUoJDNjMGZjNzYwMzlmMWM1MTYkdmFyJGFkZFNlZ21lbnQoZGlzcGxheVZhbHVlLCB0eXBlLCBhbW91bnQsIHJlc29sdmVkT3B0aW9ucykpO1xuICAgIH07XG4gICAgbGV0IGlzVmFsdWVJbnZhbGlkID0gcHJvcHMuaXNJbnZhbGlkIHx8IHByb3BzLnZhbGlkYXRpb25TdGF0ZSA9PT0gXCJpbnZhbGlkXCIgfHwgKDAsICQzNWEyMmYxNGExZjA0YjExJGV4cG9ydCRlYWM1MDkyMGNmMmZkNTlhKShjYWxlbmRhclZhbHVlLCBwcm9wcy5taW5WYWx1ZSwgcHJvcHMubWF4VmFsdWUpO1xuICAgIGxldCB2YWxpZGF0aW9uU3RhdGUgPSBwcm9wcy52YWxpZGF0aW9uU3RhdGUgfHwgKGlzVmFsdWVJbnZhbGlkID8gXCJpbnZhbGlkXCIgOiBudWxsKTtcbiAgICB2YXIgX3Byb3BzX21heEdyYW51bGFyaXR5MTtcbiAgICByZXR1cm4ge1xuICAgICAgICB2YWx1ZTogY2FsZW5kYXJWYWx1ZSxcbiAgICAgICAgZGF0ZVZhbHVlOiBkYXRlVmFsdWUsXG4gICAgICAgIGNhbGVuZGFyOiBjYWxlbmRhcixcbiAgICAgICAgc2V0VmFsdWU6IHNldFZhbHVlLFxuICAgICAgICBzZWdtZW50czogc2VnbWVudHMsXG4gICAgICAgIGRhdGVGb3JtYXR0ZXI6IGRhdGVGb3JtYXR0ZXIsXG4gICAgICAgIHZhbGlkYXRpb25TdGF0ZTogdmFsaWRhdGlvblN0YXRlLFxuICAgICAgICBpc0ludmFsaWQ6IGlzVmFsdWVJbnZhbGlkLFxuICAgICAgICBncmFudWxhcml0eTogZ3JhbnVsYXJpdHksXG4gICAgICAgIG1heEdyYW51bGFyaXR5OiAoX3Byb3BzX21heEdyYW51bGFyaXR5MSA9IHByb3BzLm1heEdyYW51bGFyaXR5KSAhPT0gbnVsbCAmJiBfcHJvcHNfbWF4R3JhbnVsYXJpdHkxICE9PSB2b2lkIDAgPyBfcHJvcHNfbWF4R3JhbnVsYXJpdHkxIDogXCJ5ZWFyXCIsXG4gICAgICAgIGlzRGlzYWJsZWQ6IGlzRGlzYWJsZWQsXG4gICAgICAgIGlzUmVhZE9ubHk6IGlzUmVhZE9ubHksXG4gICAgICAgIGlzUmVxdWlyZWQ6IGlzUmVxdWlyZWQsXG4gICAgICAgIGluY3JlbWVudCAocGFydCkge1xuICAgICAgICAgICAgYWRqdXN0U2VnbWVudChwYXJ0LCAxKTtcbiAgICAgICAgfSxcbiAgICAgICAgZGVjcmVtZW50IChwYXJ0KSB7XG4gICAgICAgICAgICBhZGp1c3RTZWdtZW50KHBhcnQsIC0xKTtcbiAgICAgICAgfSxcbiAgICAgICAgaW5jcmVtZW50UGFnZSAocGFydCkge1xuICAgICAgICAgICAgYWRqdXN0U2VnbWVudChwYXJ0LCAkM2MwZmM3NjAzOWYxYzUxNiR2YXIkUEFHRV9TVEVQW3BhcnRdIHx8IDEpO1xuICAgICAgICB9LFxuICAgICAgICBkZWNyZW1lbnRQYWdlIChwYXJ0KSB7XG4gICAgICAgICAgICBhZGp1c3RTZWdtZW50KHBhcnQsIC0oJDNjMGZjNzYwMzlmMWM1MTYkdmFyJFBBR0VfU1RFUFtwYXJ0XSB8fCAxKSk7XG4gICAgICAgIH0sXG4gICAgICAgIHNldFNlZ21lbnQgKHBhcnQsIHYpIHtcbiAgICAgICAgICAgIG1hcmtWYWxpZChwYXJ0KTtcbiAgICAgICAgICAgIHNldFZhbHVlKCQzYzBmYzc2MDM5ZjFjNTE2JHZhciRzZXRTZWdtZW50KGRpc3BsYXlWYWx1ZSwgcGFydCwgdiwgcmVzb2x2ZWRPcHRpb25zKSk7XG4gICAgICAgIH0sXG4gICAgICAgIGNvbmZpcm1QbGFjZWhvbGRlciAoKSB7XG4gICAgICAgICAgICBpZiAocHJvcHMuaXNEaXNhYmxlZCB8fCBwcm9wcy5pc1JlYWRPbmx5KSByZXR1cm47XG4gICAgICAgICAgICAvLyBDb25maXJtIHRoZSBwbGFjZWhvbGRlciBpZiBvbmx5IHRoZSBkYXkgcGVyaW9kIGlzIG5vdCBmaWxsZWQgaW4uXG4gICAgICAgICAgICBsZXQgdmFsaWRLZXlzID0gT2JqZWN0LmtleXModmFsaWRTZWdtZW50cyk7XG4gICAgICAgICAgICBsZXQgYWxsS2V5cyA9IE9iamVjdC5rZXlzKGFsbFNlZ21lbnRzKTtcbiAgICAgICAgICAgIGlmICh2YWxpZEtleXMubGVuZ3RoID09PSBhbGxLZXlzLmxlbmd0aCAtIDEgJiYgYWxsU2VnbWVudHMuZGF5UGVyaW9kICYmICF2YWxpZFNlZ21lbnRzLmRheVBlcmlvZCkge1xuICAgICAgICAgICAgICAgIHZhbGlkU2VnbWVudHMgPSB7XG4gICAgICAgICAgICAgICAgICAgIC4uLmFsbFNlZ21lbnRzXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBzZXRWYWxpZFNlZ21lbnRzKHZhbGlkU2VnbWVudHMpO1xuICAgICAgICAgICAgICAgIHNldFZhbHVlKGRpc3BsYXlWYWx1ZS5jb3B5KCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBjbGVhclNlZ21lbnQgKHBhcnQpIHtcbiAgICAgICAgICAgIGRlbGV0ZSB2YWxpZFNlZ21lbnRzW3BhcnRdO1xuICAgICAgICAgICAgY2xlYXJlZFNlZ21lbnQuY3VycmVudCA9IHBhcnQ7XG4gICAgICAgICAgICBzZXRWYWxpZFNlZ21lbnRzKHtcbiAgICAgICAgICAgICAgICAuLi52YWxpZFNlZ21lbnRzXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGxldCBwbGFjZWhvbGRlciA9ICgwLCAkMzVhMjJmMTRhMWYwNGIxMSRleHBvcnQkNjZhYTJiMDlkZTRiMWVhNSkocHJvcHMucGxhY2Vob2xkZXJWYWx1ZSwgZ3JhbnVsYXJpdHksIGNhbGVuZGFyLCBkZWZhdWx0VGltZVpvbmUpO1xuICAgICAgICAgICAgbGV0IHZhbHVlID0gZGlzcGxheVZhbHVlO1xuICAgICAgICAgICAgLy8gUmVzZXQgZGF5IHBlcmlvZCB0byBkZWZhdWx0IHdpdGhvdXQgY2hhbmdpbmcgdGhlIGhvdXIuXG4gICAgICAgICAgICBpZiAocGFydCA9PT0gXCJkYXlQZXJpb2RcIiAmJiBcImhvdXJcIiBpbiBkaXNwbGF5VmFsdWUgJiYgXCJob3VyXCIgaW4gcGxhY2Vob2xkZXIpIHtcbiAgICAgICAgICAgICAgICBsZXQgaXNQTSA9IGRpc3BsYXlWYWx1ZS5ob3VyID49IDEyO1xuICAgICAgICAgICAgICAgIGxldCBzaG91bGRCZVBNID0gcGxhY2Vob2xkZXIuaG91ciA+PSAxMjtcbiAgICAgICAgICAgICAgICBpZiAoaXNQTSAmJiAhc2hvdWxkQmVQTSkgdmFsdWUgPSBkaXNwbGF5VmFsdWUuc2V0KHtcbiAgICAgICAgICAgICAgICAgICAgaG91cjogZGlzcGxheVZhbHVlLmhvdXIgLSAxMlxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKCFpc1BNICYmIHNob3VsZEJlUE0pIHZhbHVlID0gZGlzcGxheVZhbHVlLnNldCh7XG4gICAgICAgICAgICAgICAgICAgIGhvdXI6IGRpc3BsYXlWYWx1ZS5ob3VyICsgMTJcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocGFydCBpbiBkaXNwbGF5VmFsdWUpIHZhbHVlID0gZGlzcGxheVZhbHVlLnNldCh7XG4gICAgICAgICAgICAgICAgW3BhcnRdOiBwbGFjZWhvbGRlcltwYXJ0XVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBzZXREYXRlKG51bGwpO1xuICAgICAgICAgICAgc2V0VmFsdWUodmFsdWUpO1xuICAgICAgICB9LFxuICAgICAgICBmb3JtYXRWYWx1ZSAoZmllbGRPcHRpb25zKSB7XG4gICAgICAgICAgICBpZiAoIWNhbGVuZGFyVmFsdWUpIHJldHVybiBcIlwiO1xuICAgICAgICAgICAgbGV0IGZvcm1hdE9wdGlvbnMgPSAoMCwgJDM1YTIyZjE0YTFmMDRiMTEkZXhwb3J0JDdlMzE5ZWE0MDdlNjNiYzApKGZpZWxkT3B0aW9ucywgZm9ybWF0T3B0cyk7XG4gICAgICAgICAgICBsZXQgZm9ybWF0dGVyID0gbmV3ICgwLCAkN1V6b00kRGF0ZUZvcm1hdHRlcikobG9jYWxlLCBmb3JtYXRPcHRpb25zKTtcbiAgICAgICAgICAgIHJldHVybiBmb3JtYXR0ZXIuZm9ybWF0KGRhdGVWYWx1ZSk7XG4gICAgICAgIH1cbiAgICB9O1xufVxuZnVuY3Rpb24gJDNjMGZjNzYwMzlmMWM1MTYkdmFyJGdldFNlZ21lbnRMaW1pdHMoZGF0ZSwgdHlwZSwgb3B0aW9ucykge1xuICAgIHN3aXRjaCh0eXBlKXtcbiAgICAgICAgY2FzZSBcImVyYVwiOlxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGxldCBlcmFzID0gZGF0ZS5jYWxlbmRhci5nZXRFcmFzKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGVyYXMuaW5kZXhPZihkYXRlLmVyYSksXG4gICAgICAgICAgICAgICAgICAgIG1pblZhbHVlOiAwLFxuICAgICAgICAgICAgICAgICAgICBtYXhWYWx1ZTogZXJhcy5sZW5ndGggLSAxXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgY2FzZSBcInllYXJcIjpcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IGRhdGUueWVhcixcbiAgICAgICAgICAgICAgICBtaW5WYWx1ZTogMSxcbiAgICAgICAgICAgICAgICBtYXhWYWx1ZTogZGF0ZS5jYWxlbmRhci5nZXRZZWFyc0luRXJhKGRhdGUpXG4gICAgICAgICAgICB9O1xuICAgICAgICBjYXNlIFwibW9udGhcIjpcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IGRhdGUubW9udGgsXG4gICAgICAgICAgICAgICAgbWluVmFsdWU6ICgwLCAkN1V6b00kZ2V0TWluaW11bU1vbnRoSW5ZZWFyKShkYXRlKSxcbiAgICAgICAgICAgICAgICBtYXhWYWx1ZTogZGF0ZS5jYWxlbmRhci5nZXRNb250aHNJblllYXIoZGF0ZSlcbiAgICAgICAgICAgIH07XG4gICAgICAgIGNhc2UgXCJkYXlcIjpcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IGRhdGUuZGF5LFxuICAgICAgICAgICAgICAgIG1pblZhbHVlOiAoMCwgJDdVem9NJGdldE1pbmltdW1EYXlJbk1vbnRoKShkYXRlKSxcbiAgICAgICAgICAgICAgICBtYXhWYWx1ZTogZGF0ZS5jYWxlbmRhci5nZXREYXlzSW5Nb250aChkYXRlKVxuICAgICAgICAgICAgfTtcbiAgICB9XG4gICAgaWYgKFwiaG91clwiIGluIGRhdGUpIHN3aXRjaCh0eXBlKXtcbiAgICAgICAgY2FzZSBcImRheVBlcmlvZFwiOlxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogZGF0ZS5ob3VyID49IDEyID8gMTIgOiAwLFxuICAgICAgICAgICAgICAgIG1pblZhbHVlOiAwLFxuICAgICAgICAgICAgICAgIG1heFZhbHVlOiAxMlxuICAgICAgICAgICAgfTtcbiAgICAgICAgY2FzZSBcImhvdXJcIjpcbiAgICAgICAgICAgIGlmIChvcHRpb25zLmhvdXIxMikge1xuICAgICAgICAgICAgICAgIGxldCBpc1BNID0gZGF0ZS5ob3VyID49IDEyO1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiBkYXRlLmhvdXIsXG4gICAgICAgICAgICAgICAgICAgIG1pblZhbHVlOiBpc1BNID8gMTIgOiAwLFxuICAgICAgICAgICAgICAgICAgICBtYXhWYWx1ZTogaXNQTSA/IDIzIDogMTFcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogZGF0ZS5ob3VyLFxuICAgICAgICAgICAgICAgIG1pblZhbHVlOiAwLFxuICAgICAgICAgICAgICAgIG1heFZhbHVlOiAyM1xuICAgICAgICAgICAgfTtcbiAgICAgICAgY2FzZSBcIm1pbnV0ZVwiOlxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogZGF0ZS5taW51dGUsXG4gICAgICAgICAgICAgICAgbWluVmFsdWU6IDAsXG4gICAgICAgICAgICAgICAgbWF4VmFsdWU6IDU5XG4gICAgICAgICAgICB9O1xuICAgICAgICBjYXNlIFwic2Vjb25kXCI6XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBkYXRlLnNlY29uZCxcbiAgICAgICAgICAgICAgICBtaW5WYWx1ZTogMCxcbiAgICAgICAgICAgICAgICBtYXhWYWx1ZTogNTlcbiAgICAgICAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiB7fTtcbn1cbmZ1bmN0aW9uICQzYzBmYzc2MDM5ZjFjNTE2JHZhciRhZGRTZWdtZW50KHZhbHVlLCBwYXJ0LCBhbW91bnQsIG9wdGlvbnMpIHtcbiAgICBzd2l0Y2gocGFydCl7XG4gICAgICAgIGNhc2UgXCJlcmFcIjpcbiAgICAgICAgY2FzZSBcInllYXJcIjpcbiAgICAgICAgY2FzZSBcIm1vbnRoXCI6XG4gICAgICAgIGNhc2UgXCJkYXlcIjpcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZS5jeWNsZShwYXJ0LCBhbW91bnQsIHtcbiAgICAgICAgICAgICAgICByb3VuZDogcGFydCA9PT0gXCJ5ZWFyXCJcbiAgICAgICAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoXCJob3VyXCIgaW4gdmFsdWUpIHN3aXRjaChwYXJ0KXtcbiAgICAgICAgY2FzZSBcImRheVBlcmlvZFwiOlxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGxldCBob3VycyA9IHZhbHVlLmhvdXI7XG4gICAgICAgICAgICAgICAgbGV0IGlzUE0gPSBob3VycyA+PSAxMjtcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWUuc2V0KHtcbiAgICAgICAgICAgICAgICAgICAgaG91cjogaXNQTSA/IGhvdXJzIC0gMTIgOiBob3VycyArIDEyXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIGNhc2UgXCJob3VyXCI6XG4gICAgICAgIGNhc2UgXCJtaW51dGVcIjpcbiAgICAgICAgY2FzZSBcInNlY29uZFwiOlxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlLmN5Y2xlKHBhcnQsIGFtb3VudCwge1xuICAgICAgICAgICAgICAgIHJvdW5kOiBwYXJ0ICE9PSBcImhvdXJcIixcbiAgICAgICAgICAgICAgICBob3VyQ3ljbGU6IG9wdGlvbnMuaG91cjEyID8gMTIgOiAyNFxuICAgICAgICAgICAgfSk7XG4gICAgfVxufVxuZnVuY3Rpb24gJDNjMGZjNzYwMzlmMWM1MTYkdmFyJHNldFNlZ21lbnQodmFsdWUsIHBhcnQsIHNlZ21lbnRWYWx1ZSwgb3B0aW9ucykge1xuICAgIHN3aXRjaChwYXJ0KXtcbiAgICAgICAgY2FzZSBcImRheVwiOlxuICAgICAgICBjYXNlIFwibW9udGhcIjpcbiAgICAgICAgY2FzZSBcInllYXJcIjpcbiAgICAgICAgY2FzZSBcImVyYVwiOlxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlLnNldCh7XG4gICAgICAgICAgICAgICAgW3BhcnRdOiBzZWdtZW50VmFsdWVcbiAgICAgICAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoXCJob3VyXCIgaW4gdmFsdWUpIHN3aXRjaChwYXJ0KXtcbiAgICAgICAgY2FzZSBcImRheVBlcmlvZFwiOlxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGxldCBob3VycyA9IHZhbHVlLmhvdXI7XG4gICAgICAgICAgICAgICAgbGV0IHdhc1BNID0gaG91cnMgPj0gMTI7XG4gICAgICAgICAgICAgICAgbGV0IGlzUE0gPSBzZWdtZW50VmFsdWUgPj0gMTI7XG4gICAgICAgICAgICAgICAgaWYgKGlzUE0gPT09IHdhc1BNKSByZXR1cm4gdmFsdWU7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlLnNldCh7XG4gICAgICAgICAgICAgICAgICAgIGhvdXI6IHdhc1BNID8gaG91cnMgLSAxMiA6IGhvdXJzICsgMTJcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgY2FzZSBcImhvdXJcIjpcbiAgICAgICAgICAgIC8vIEluIDEyIGhvdXIgdGltZSwgZW5zdXJlIHRoYXQgQU0vUE0gZG9lcyBub3QgY2hhbmdlXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5ob3VyMTIpIHtcbiAgICAgICAgICAgICAgICBsZXQgaG91cnMgPSB2YWx1ZS5ob3VyO1xuICAgICAgICAgICAgICAgIGxldCB3YXNQTSA9IGhvdXJzID49IDEyO1xuICAgICAgICAgICAgICAgIGlmICghd2FzUE0gJiYgc2VnbWVudFZhbHVlID09PSAxMikgc2VnbWVudFZhbHVlID0gMDtcbiAgICAgICAgICAgICAgICBpZiAod2FzUE0gJiYgc2VnbWVudFZhbHVlIDwgMTIpIHNlZ21lbnRWYWx1ZSArPSAxMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgLy8gZmFsbHRocm91Z2hcbiAgICAgICAgY2FzZSBcIm1pbnV0ZVwiOlxuICAgICAgICBjYXNlIFwic2Vjb25kXCI6XG4gICAgICAgICAgICByZXR1cm4gdmFsdWUuc2V0KHtcbiAgICAgICAgICAgICAgICBbcGFydF06IHNlZ21lbnRWYWx1ZVxuICAgICAgICAgICAgfSk7XG4gICAgfVxufVxuXG5cbi8qXG4gKiBDb3B5cmlnaHQgMjAyMCBBZG9iZS4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFRoaXMgZmlsZSBpcyBsaWNlbnNlZCB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4gWW91IG1heSBvYnRhaW4gYSBjb3B5XG4gKiBvZiB0aGUgTGljZW5zZSBhdCBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyXG4gKiB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBSRVBSRVNFTlRBVElPTlNcbiAqIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZVxuICogZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqLyBcblxuXG5cblxuZnVuY3Rpb24gJDkzYzM4YTVlMjhiZTYyNDkkZXhwb3J0JGU1MGE2MWMxZGU5ZjU3NChwcm9wcykge1xuICAgIHZhciBfcHJvcHNfaXNEYXRlVW5hdmFpbGFibGUsIF9wcm9wc19pc0RhdGVVbmF2YWlsYWJsZTE7XG4gICAgbGV0IG92ZXJsYXlTdGF0ZSA9ICgwLCAkN1V6b00kdXNlT3ZlcmxheVRyaWdnZXJTdGF0ZSkocHJvcHMpO1xuICAgIGxldCBbY29udHJvbGxlZFZhbHVlLCBzZXRDb250cm9sbGVkVmFsdWVdID0gKDAsICQ3VXpvTSR1c2VDb250cm9sbGVkU3RhdGUpKHByb3BzLnZhbHVlLCBwcm9wcy5kZWZhdWx0VmFsdWUgfHwgbnVsbCwgcHJvcHMub25DaGFuZ2UpO1xuICAgIGxldCBbcGxhY2Vob2xkZXJWYWx1ZSwgc2V0UGxhY2Vob2xkZXJWYWx1ZV0gPSAoMCwgJDdVem9NJHVzZVN0YXRlKSgoKT0+Y29udHJvbGxlZFZhbHVlIHx8IHtcbiAgICAgICAgICAgIHN0YXJ0OiBudWxsLFxuICAgICAgICAgICAgZW5kOiBudWxsXG4gICAgICAgIH0pO1xuICAgIC8vIFJlc2V0IHRoZSBwbGFjZWhvbGRlciBpZiB0aGUgdmFsdWUgcHJvcCBpcyBzZXQgdG8gbnVsbC5cbiAgICBpZiAoY29udHJvbGxlZFZhbHVlID09IG51bGwgJiYgcGxhY2Vob2xkZXJWYWx1ZS5zdGFydCAmJiBwbGFjZWhvbGRlclZhbHVlLmVuZCkge1xuICAgICAgICBwbGFjZWhvbGRlclZhbHVlID0ge1xuICAgICAgICAgICAgc3RhcnQ6IG51bGwsXG4gICAgICAgICAgICBlbmQ6IG51bGxcbiAgICAgICAgfTtcbiAgICAgICAgc2V0UGxhY2Vob2xkZXJWYWx1ZShwbGFjZWhvbGRlclZhbHVlKTtcbiAgICB9XG4gICAgbGV0IHZhbHVlID0gY29udHJvbGxlZFZhbHVlIHx8IHBsYWNlaG9sZGVyVmFsdWU7XG4gICAgbGV0IHNldFZhbHVlID0gKHZhbHVlKT0+e1xuICAgICAgICBzZXRQbGFjZWhvbGRlclZhbHVlKHZhbHVlIHx8IHtcbiAgICAgICAgICAgIHN0YXJ0OiBudWxsLFxuICAgICAgICAgICAgZW5kOiBudWxsXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoKHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB2b2lkIDAgPyB2b2lkIDAgOiB2YWx1ZS5zdGFydCkgJiYgdmFsdWUuZW5kKSBzZXRDb250cm9sbGVkVmFsdWUodmFsdWUpO1xuICAgICAgICBlbHNlIHNldENvbnRyb2xsZWRWYWx1ZShudWxsKTtcbiAgICB9O1xuICAgIGxldCB2ID0gKHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB2b2lkIDAgPyB2b2lkIDAgOiB2YWx1ZS5zdGFydCkgfHwgKHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB2b2lkIDAgPyB2b2lkIDAgOiB2YWx1ZS5lbmQpIHx8IHByb3BzLnBsYWNlaG9sZGVyVmFsdWU7XG4gICAgbGV0IFtncmFudWxhcml0eV0gPSAoMCwgJDM1YTIyZjE0YTFmMDRiMTEkZXhwb3J0JDI0NDBkYTM1M2NlZGFkNDMpKHYsIHByb3BzLmdyYW51bGFyaXR5KTtcbiAgICBsZXQgaGFzVGltZSA9IGdyYW51bGFyaXR5ID09PSBcImhvdXJcIiB8fCBncmFudWxhcml0eSA9PT0gXCJtaW51dGVcIiB8fCBncmFudWxhcml0eSA9PT0gXCJzZWNvbmRcIjtcbiAgICB2YXIgX3Byb3BzX3Nob3VsZENsb3NlT25TZWxlY3Q7XG4gICAgbGV0IHNob3VsZENsb3NlT25TZWxlY3QgPSAoX3Byb3BzX3Nob3VsZENsb3NlT25TZWxlY3QgPSBwcm9wcy5zaG91bGRDbG9zZU9uU2VsZWN0KSAhPT0gbnVsbCAmJiBfcHJvcHNfc2hvdWxkQ2xvc2VPblNlbGVjdCAhPT0gdm9pZCAwID8gX3Byb3BzX3Nob3VsZENsb3NlT25TZWxlY3QgOiB0cnVlO1xuICAgIGxldCBbZGF0ZVJhbmdlLCBzZXRTZWxlY3RlZERhdGVSYW5nZV0gPSAoMCwgJDdVem9NJHVzZVN0YXRlKShudWxsKTtcbiAgICBsZXQgW3RpbWVSYW5nZSwgc2V0U2VsZWN0ZWRUaW1lUmFuZ2VdID0gKDAsICQ3VXpvTSR1c2VTdGF0ZSkobnVsbCk7XG4gICAgaWYgKHZhbHVlICYmIHZhbHVlLnN0YXJ0ICYmIHZhbHVlLmVuZCkge1xuICAgICAgICBkYXRlUmFuZ2UgPSB2YWx1ZTtcbiAgICAgICAgaWYgKFwiaG91clwiIGluIHZhbHVlLnN0YXJ0KSB0aW1lUmFuZ2UgPSB2YWx1ZTtcbiAgICB9XG4gICAgbGV0IGNvbW1pdFZhbHVlID0gKGRhdGVSYW5nZSwgdGltZVJhbmdlKT0+e1xuICAgICAgICBzZXRWYWx1ZSh7XG4gICAgICAgICAgICBzdGFydDogXCJ0aW1lWm9uZVwiIGluIHRpbWVSYW5nZS5zdGFydCA/IHRpbWVSYW5nZS5zdGFydC5zZXQoKDAsICQ3VXpvTSR0b0NhbGVuZGFyRGF0ZSkoZGF0ZVJhbmdlLnN0YXJ0KSkgOiAoMCwgJDdVem9NJHRvQ2FsZW5kYXJEYXRlVGltZSkoZGF0ZVJhbmdlLnN0YXJ0LCB0aW1lUmFuZ2Uuc3RhcnQpLFxuICAgICAgICAgICAgZW5kOiBcInRpbWVab25lXCIgaW4gdGltZVJhbmdlLmVuZCA/IHRpbWVSYW5nZS5lbmQuc2V0KCgwLCAkN1V6b00kdG9DYWxlbmRhckRhdGUpKGRhdGVSYW5nZS5lbmQpKSA6ICgwLCAkN1V6b00kdG9DYWxlbmRhckRhdGVUaW1lKShkYXRlUmFuZ2UuZW5kLCB0aW1lUmFuZ2UuZW5kKVxuICAgICAgICB9KTtcbiAgICAgICAgc2V0U2VsZWN0ZWREYXRlUmFuZ2UobnVsbCk7XG4gICAgICAgIHNldFNlbGVjdGVkVGltZVJhbmdlKG51bGwpO1xuICAgIH07XG4gICAgLy8gSW50ZXJjZXB0IHNldFZhbHVlIHRvIG1ha2Ugc3VyZSB0aGUgVGltZSBzZWN0aW9uIGlzIG5vdCBjaGFuZ2VkIGJ5IGRhdGUgc2VsZWN0aW9uIGluIENhbGVuZGFyXG4gICAgbGV0IHNldERhdGVSYW5nZSA9IChyYW5nZSk9PntcbiAgICAgICAgbGV0IHNob3VsZENsb3NlID0gdHlwZW9mIHNob3VsZENsb3NlT25TZWxlY3QgPT09IFwiZnVuY3Rpb25cIiA/IHNob3VsZENsb3NlT25TZWxlY3QoKSA6IHNob3VsZENsb3NlT25TZWxlY3Q7XG4gICAgICAgIGlmIChoYXNUaW1lKSB7XG4gICAgICAgICAgICBpZiAoc2hvdWxkQ2xvc2UgfHwgcmFuZ2Uuc3RhcnQgJiYgcmFuZ2UuZW5kICYmICh0aW1lUmFuZ2UgPT09IG51bGwgfHwgdGltZVJhbmdlID09PSB2b2lkIDAgPyB2b2lkIDAgOiB0aW1lUmFuZ2Uuc3RhcnQpICYmICh0aW1lUmFuZ2UgPT09IG51bGwgfHwgdGltZVJhbmdlID09PSB2b2lkIDAgPyB2b2lkIDAgOiB0aW1lUmFuZ2UuZW5kKSkgY29tbWl0VmFsdWUocmFuZ2UsIHtcbiAgICAgICAgICAgICAgICBzdGFydDogKHRpbWVSYW5nZSA9PT0gbnVsbCB8fCB0aW1lUmFuZ2UgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHRpbWVSYW5nZS5zdGFydCkgfHwgKDAsICQzNWEyMmYxNGExZjA0YjExJGV4cG9ydCRjNTIyMWE3OGVmNzNjNWU5KShwcm9wcy5wbGFjZWhvbGRlclZhbHVlKSxcbiAgICAgICAgICAgICAgICBlbmQ6ICh0aW1lUmFuZ2UgPT09IG51bGwgfHwgdGltZVJhbmdlID09PSB2b2lkIDAgPyB2b2lkIDAgOiB0aW1lUmFuZ2UuZW5kKSB8fCAoMCwgJDM1YTIyZjE0YTFmMDRiMTEkZXhwb3J0JGM1MjIxYTc4ZWY3M2M1ZTkpKHByb3BzLnBsYWNlaG9sZGVyVmFsdWUpXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGVsc2Ugc2V0U2VsZWN0ZWREYXRlUmFuZ2UocmFuZ2UpO1xuICAgICAgICB9IGVsc2UgaWYgKHJhbmdlLnN0YXJ0ICYmIHJhbmdlLmVuZCkgc2V0VmFsdWUocmFuZ2UpO1xuICAgICAgICBlbHNlIHNldFNlbGVjdGVkRGF0ZVJhbmdlKHJhbmdlKTtcbiAgICAgICAgaWYgKHNob3VsZENsb3NlKSBvdmVybGF5U3RhdGUuc2V0T3BlbihmYWxzZSk7XG4gICAgfTtcbiAgICBsZXQgc2V0VGltZVJhbmdlID0gKHJhbmdlKT0+e1xuICAgICAgICBpZiAoKGRhdGVSYW5nZSA9PT0gbnVsbCB8fCBkYXRlUmFuZ2UgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGRhdGVSYW5nZS5zdGFydCkgJiYgKGRhdGVSYW5nZSA9PT0gbnVsbCB8fCBkYXRlUmFuZ2UgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGRhdGVSYW5nZS5lbmQpICYmIHJhbmdlLnN0YXJ0ICYmIHJhbmdlLmVuZCkgY29tbWl0VmFsdWUoZGF0ZVJhbmdlLCByYW5nZSk7XG4gICAgICAgIGVsc2Ugc2V0U2VsZWN0ZWRUaW1lUmFuZ2UocmFuZ2UpO1xuICAgIH07XG4gICAgbGV0IGlzVmFsdWVJbnZhbGlkID0gcHJvcHMuaXNJbnZhbGlkIHx8IHByb3BzLnZhbGlkYXRpb25TdGF0ZSA9PT0gXCJpbnZhbGlkXCIgfHwgdmFsdWUgIT0gbnVsbCAmJiAoKDAsICQzNWEyMmYxNGExZjA0YjExJGV4cG9ydCRlYWM1MDkyMGNmMmZkNTlhKSh2YWx1ZS5zdGFydCwgcHJvcHMubWluVmFsdWUsIHByb3BzLm1heFZhbHVlKSB8fCAoMCwgJDM1YTIyZjE0YTFmMDRiMTEkZXhwb3J0JGVhYzUwOTIwY2YyZmQ1OWEpKHZhbHVlLmVuZCwgcHJvcHMubWluVmFsdWUsIHByb3BzLm1heFZhbHVlKSB8fCB2YWx1ZS5lbmQgIT0gbnVsbCAmJiB2YWx1ZS5zdGFydCAhPSBudWxsICYmIHZhbHVlLmVuZC5jb21wYXJlKHZhbHVlLnN0YXJ0KSA8IDAgfHwgKHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB2b2lkIDAgPyB2b2lkIDAgOiB2YWx1ZS5zdGFydCkgJiYgKChfcHJvcHNfaXNEYXRlVW5hdmFpbGFibGUgPSBwcm9wcy5pc0RhdGVVbmF2YWlsYWJsZSkgPT09IG51bGwgfHwgX3Byb3BzX2lzRGF0ZVVuYXZhaWxhYmxlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfcHJvcHNfaXNEYXRlVW5hdmFpbGFibGUuY2FsbChwcm9wcywgdmFsdWUuc3RhcnQpKSB8fCAodmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHZhbHVlLmVuZCkgJiYgKChfcHJvcHNfaXNEYXRlVW5hdmFpbGFibGUxID0gcHJvcHMuaXNEYXRlVW5hdmFpbGFibGUpID09PSBudWxsIHx8IF9wcm9wc19pc0RhdGVVbmF2YWlsYWJsZTEgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9wcm9wc19pc0RhdGVVbmF2YWlsYWJsZTEuY2FsbChwcm9wcywgdmFsdWUuZW5kKSkpO1xuICAgIGxldCB2YWxpZGF0aW9uU3RhdGUgPSBwcm9wcy52YWxpZGF0aW9uU3RhdGUgfHwgKGlzVmFsdWVJbnZhbGlkID8gXCJpbnZhbGlkXCIgOiBudWxsKTtcbiAgICByZXR1cm4ge1xuICAgICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICAgIHNldFZhbHVlOiBzZXRWYWx1ZSxcbiAgICAgICAgZGF0ZVJhbmdlOiBkYXRlUmFuZ2UsXG4gICAgICAgIHRpbWVSYW5nZTogdGltZVJhbmdlLFxuICAgICAgICBncmFudWxhcml0eTogZ3JhbnVsYXJpdHksXG4gICAgICAgIGhhc1RpbWU6IGhhc1RpbWUsXG4gICAgICAgIHNldERhdGUgKHBhcnQsIGRhdGUpIHtcbiAgICAgICAgICAgIHNldERhdGVSYW5nZSh7XG4gICAgICAgICAgICAgICAgLi4uZGF0ZVJhbmdlLFxuICAgICAgICAgICAgICAgIFtwYXJ0XTogZGF0ZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIHNldFRpbWUgKHBhcnQsIHRpbWUpIHtcbiAgICAgICAgICAgIHNldFRpbWVSYW5nZSh7XG4gICAgICAgICAgICAgICAgLi4udGltZVJhbmdlLFxuICAgICAgICAgICAgICAgIFtwYXJ0XTogdGltZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIHNldERhdGVUaW1lIChwYXJ0LCBkYXRlVGltZSkge1xuICAgICAgICAgICAgc2V0VmFsdWUoe1xuICAgICAgICAgICAgICAgIC4uLnZhbHVlLFxuICAgICAgICAgICAgICAgIFtwYXJ0XTogZGF0ZVRpbWVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBzZXREYXRlUmFuZ2U6IHNldERhdGVSYW5nZSxcbiAgICAgICAgc2V0VGltZVJhbmdlOiBzZXRUaW1lUmFuZ2UsXG4gICAgICAgIC4uLm92ZXJsYXlTdGF0ZSxcbiAgICAgICAgc2V0T3BlbiAoaXNPcGVuKSB7XG4gICAgICAgICAgICAvLyBDb21taXQgdGhlIHNlbGVjdGVkIGRhdGUgcmFuZ2Ugd2hlbiB0aGUgY2FsZW5kYXIgaXMgY2xvc2VkLiBVc2UgYSBwbGFjZWhvbGRlciB0aW1lIGlmIG9uZSB3YXNuJ3Qgc2V0LlxuICAgICAgICAgICAgLy8gSWYgb25seSB0aGUgdGltZSByYW5nZSB3YXMgc2V0IGFuZCBub3QgdGhlIGRhdGUgcmFuZ2UsIGRvbid0IGNvbW1pdC4gVGhlIHN0YXRlIHdpbGwgYmUgcHJlc2VydmVkIHVudGlsXG4gICAgICAgICAgICAvLyB0aGUgdXNlciBvcGVucyB0aGUgcG9wb3ZlciBhZ2Fpbi5cbiAgICAgICAgICAgIGlmICghaXNPcGVuICYmICEoKHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB2b2lkIDAgPyB2b2lkIDAgOiB2YWx1ZS5zdGFydCkgJiYgKHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB2b2lkIDAgPyB2b2lkIDAgOiB2YWx1ZS5lbmQpKSAmJiAoZGF0ZVJhbmdlID09PSBudWxsIHx8IGRhdGVSYW5nZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogZGF0ZVJhbmdlLnN0YXJ0KSAmJiAoZGF0ZVJhbmdlID09PSBudWxsIHx8IGRhdGVSYW5nZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogZGF0ZVJhbmdlLmVuZCkgJiYgaGFzVGltZSkgY29tbWl0VmFsdWUoZGF0ZVJhbmdlLCB7XG4gICAgICAgICAgICAgICAgc3RhcnQ6ICh0aW1lUmFuZ2UgPT09IG51bGwgfHwgdGltZVJhbmdlID09PSB2b2lkIDAgPyB2b2lkIDAgOiB0aW1lUmFuZ2Uuc3RhcnQpIHx8ICgwLCAkMzVhMjJmMTRhMWYwNGIxMSRleHBvcnQkYzUyMjFhNzhlZjczYzVlOSkocHJvcHMucGxhY2Vob2xkZXJWYWx1ZSksXG4gICAgICAgICAgICAgICAgZW5kOiAodGltZVJhbmdlID09PSBudWxsIHx8IHRpbWVSYW5nZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogdGltZVJhbmdlLmVuZCkgfHwgKDAsICQzNWEyMmYxNGExZjA0YjExJGV4cG9ydCRjNTIyMWE3OGVmNzNjNWU5KShwcm9wcy5wbGFjZWhvbGRlclZhbHVlKVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBvdmVybGF5U3RhdGUuc2V0T3Blbihpc09wZW4pO1xuICAgICAgICB9LFxuICAgICAgICB2YWxpZGF0aW9uU3RhdGU6IHZhbGlkYXRpb25TdGF0ZSxcbiAgICAgICAgaXNJbnZhbGlkOiBpc1ZhbHVlSW52YWxpZCxcbiAgICAgICAgZm9ybWF0VmFsdWUgKGxvY2FsZSwgZmllbGRPcHRpb25zKSB7XG4gICAgICAgICAgICBpZiAoIXZhbHVlIHx8ICF2YWx1ZS5zdGFydCB8fCAhdmFsdWUuZW5kKSByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIGxldCBzdGFydFRpbWVab25lID0gXCJ0aW1lWm9uZVwiIGluIHZhbHVlLnN0YXJ0ID8gdmFsdWUuc3RhcnQudGltZVpvbmUgOiB1bmRlZmluZWQ7XG4gICAgICAgICAgICBsZXQgc3RhcnRHcmFudWxhcml0eSA9IHByb3BzLmdyYW51bGFyaXR5IHx8ICh2YWx1ZS5zdGFydCAmJiBcIm1pbnV0ZVwiIGluIHZhbHVlLnN0YXJ0ID8gXCJtaW51dGVcIiA6IFwiZGF5XCIpO1xuICAgICAgICAgICAgbGV0IGVuZFRpbWVab25lID0gXCJ0aW1lWm9uZVwiIGluIHZhbHVlLmVuZCA/IHZhbHVlLmVuZC50aW1lWm9uZSA6IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIGxldCBlbmRHcmFudWxhcml0eSA9IHByb3BzLmdyYW51bGFyaXR5IHx8ICh2YWx1ZS5lbmQgJiYgXCJtaW51dGVcIiBpbiB2YWx1ZS5lbmQgPyBcIm1pbnV0ZVwiIDogXCJkYXlcIik7XG4gICAgICAgICAgICBsZXQgc3RhcnRPcHRpb25zID0gKDAsICQzNWEyMmYxNGExZjA0YjExJGV4cG9ydCQ3ZTMxOWVhNDA3ZTYzYmMwKShmaWVsZE9wdGlvbnMsIHtcbiAgICAgICAgICAgICAgICBncmFudWxhcml0eTogc3RhcnRHcmFudWxhcml0eSxcbiAgICAgICAgICAgICAgICB0aW1lWm9uZTogc3RhcnRUaW1lWm9uZSxcbiAgICAgICAgICAgICAgICBoaWRlVGltZVpvbmU6IHByb3BzLmhpZGVUaW1lWm9uZSxcbiAgICAgICAgICAgICAgICBob3VyQ3ljbGU6IHByb3BzLmhvdXJDeWNsZSxcbiAgICAgICAgICAgICAgICBzaG93RXJhOiB2YWx1ZS5zdGFydC5jYWxlbmRhci5pZGVudGlmaWVyID09PSBcImdyZWdvcnlcIiAmJiB2YWx1ZS5zdGFydC5lcmEgPT09IFwiQkNcIiB8fCB2YWx1ZS5lbmQuY2FsZW5kYXIuaWRlbnRpZmllciA9PT0gXCJncmVnb3J5XCIgJiYgdmFsdWUuZW5kLmVyYSA9PT0gXCJCQ1wiXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGxldCBzdGFydERhdGUgPSB2YWx1ZS5zdGFydC50b0RhdGUoc3RhcnRUaW1lWm9uZSB8fCBcIlVUQ1wiKTtcbiAgICAgICAgICAgIGxldCBlbmREYXRlID0gdmFsdWUuZW5kLnRvRGF0ZShlbmRUaW1lWm9uZSB8fCBcIlVUQ1wiKTtcbiAgICAgICAgICAgIGxldCBzdGFydEZvcm1hdHRlciA9IG5ldyAoMCwgJDdVem9NJERhdGVGb3JtYXR0ZXIpKGxvY2FsZSwgc3RhcnRPcHRpb25zKTtcbiAgICAgICAgICAgIGxldCBlbmRGb3JtYXR0ZXI7XG4gICAgICAgICAgICBpZiAoc3RhcnRUaW1lWm9uZSA9PT0gZW5kVGltZVpvbmUgJiYgc3RhcnRHcmFudWxhcml0eSA9PT0gZW5kR3JhbnVsYXJpdHkgJiYgdmFsdWUuc3RhcnQuY29tcGFyZSh2YWx1ZS5lbmQpICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgLy8gVXNlIGZvcm1hdFJhbmdlLCBhcyBpdCByZXN1bHRzIGluIHNob3J0ZXIgb3V0cHV0IHdoZW4gc29tZSBvZiB0aGUgZmllbGRzXG4gICAgICAgICAgICAgICAgLy8gYXJlIHNoYXJlZCBiZXR3ZWVuIHRoZSBzdGFydCBhbmQgZW5kIGRhdGVzIChlLmcuIHRoZSBzYW1lIG1vbnRoKS5cbiAgICAgICAgICAgICAgICAvLyBGb3JtYXR0aW5nIHdpbGwgZmFpbCBpZiB0aGUgZW5kIGRhdGUgaXMgYmVmb3JlIHRoZSBzdGFydCBkYXRlLiBGYWxsIGJhY2sgYmVsb3cgd2hlbiB0aGF0IGhhcHBlbnMuXG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHBhcnRzID0gc3RhcnRGb3JtYXR0ZXIuZm9ybWF0UmFuZ2VUb1BhcnRzKHN0YXJ0RGF0ZSwgZW5kRGF0ZSk7XG4gICAgICAgICAgICAgICAgICAgIC8vIEZpbmQgdGhlIHNlcGFyYXRvciBiZXR3ZWVuIHRoZSBzdGFydCBhbmQgZW5kIGRhdGUuIFRoaXMgaXMgZGV0ZXJtaW5lZFxuICAgICAgICAgICAgICAgICAgICAvLyBieSBmaW5kaW5nIHRoZSBsYXN0IHNoYXJlZCBsaXRlcmFsIGJlZm9yZSB0aGUgZW5kIHJhbmdlLlxuICAgICAgICAgICAgICAgICAgICBsZXQgc2VwYXJhdG9ySW5kZXggPSAtMTtcbiAgICAgICAgICAgICAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IHBhcnRzLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBwYXJ0ID0gcGFydHNbaV07XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocGFydC5zb3VyY2UgPT09IFwic2hhcmVkXCIgJiYgcGFydC50eXBlID09PSBcImxpdGVyYWxcIikgc2VwYXJhdG9ySW5kZXggPSBpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAocGFydC5zb3VyY2UgPT09IFwiZW5kUmFuZ2VcIikgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy8gTm93IHdlIGNhbiBjb21iaW5lIHRoZSBwYXJ0cyBpbnRvIHN0YXJ0IGFuZCBlbmQgc3RyaW5ncy5cbiAgICAgICAgICAgICAgICAgICAgbGV0IHN0YXJ0ID0gXCJcIjtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGVuZCA9IFwiXCI7XG4gICAgICAgICAgICAgICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCBwYXJ0cy5sZW5ndGg7IGkrKyl7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaSA8IHNlcGFyYXRvckluZGV4KSBzdGFydCArPSBwYXJ0c1tpXS52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGkgPiBzZXBhcmF0b3JJbmRleCkgZW5kICs9IHBhcnRzW2ldLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGFydDogc3RhcnQsXG4gICAgICAgICAgICAgICAgICAgICAgICBlbmQ6IGVuZFxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAvLyBpZ25vcmVcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZW5kRm9ybWF0dGVyID0gc3RhcnRGb3JtYXR0ZXI7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGxldCBlbmRPcHRpb25zID0gKDAsICQzNWEyMmYxNGExZjA0YjExJGV4cG9ydCQ3ZTMxOWVhNDA3ZTYzYmMwKShmaWVsZE9wdGlvbnMsIHtcbiAgICAgICAgICAgICAgICAgICAgZ3JhbnVsYXJpdHk6IGVuZEdyYW51bGFyaXR5LFxuICAgICAgICAgICAgICAgICAgICB0aW1lWm9uZTogZW5kVGltZVpvbmUsXG4gICAgICAgICAgICAgICAgICAgIGhpZGVUaW1lWm9uZTogcHJvcHMuaGlkZVRpbWVab25lLFxuICAgICAgICAgICAgICAgICAgICBob3VyQ3ljbGU6IHByb3BzLmhvdXJDeWNsZVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGVuZEZvcm1hdHRlciA9IG5ldyAoMCwgJDdVem9NJERhdGVGb3JtYXR0ZXIpKGxvY2FsZSwgZW5kT3B0aW9ucyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHN0YXJ0OiBzdGFydEZvcm1hdHRlci5mb3JtYXQoc3RhcnREYXRlKSxcbiAgICAgICAgICAgICAgICBlbmQ6IGVuZEZvcm1hdHRlci5mb3JtYXQoZW5kRGF0ZSlcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9O1xufVxuXG5cbi8qXG4gKiBDb3B5cmlnaHQgMjAyMCBBZG9iZS4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFRoaXMgZmlsZSBpcyBsaWNlbnNlZCB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICdMaWNlbnNlJyk7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuIFlvdSBtYXkgb2J0YWluIGEgY29weVxuICogb2YgdGhlIExpY2Vuc2UgYXQgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlclxuICogdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gJ0FTIElTJyBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIFJFUFJFU0VOVEFUSU9OU1xuICogT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlXG4gKiBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovIFxuXG5cblxuZnVuY3Rpb24gJGVmZjVkOGVlNTI5YWM0YmIkZXhwb3J0JGZkNTNjZWYwY2M3OTYxMDEocHJvcHMpIHtcbiAgICBsZXQgeyBwbGFjZWhvbGRlclZhbHVlOiBwbGFjZWhvbGRlclZhbHVlID0gbmV3ICgwLCAkN1V6b00kVGltZSkoKSwgbWluVmFsdWU6IG1pblZhbHVlLCBtYXhWYWx1ZTogbWF4VmFsdWUsIGdyYW51bGFyaXR5OiBncmFudWxhcml0eSB9ID0gcHJvcHM7XG4gICAgbGV0IFt2YWx1ZSwgc2V0VmFsdWVdID0gKDAsICQ3VXpvTSR1c2VDb250cm9sbGVkU3RhdGUpKHByb3BzLnZhbHVlLCBwcm9wcy5kZWZhdWx0VmFsdWUsIHByb3BzLm9uQ2hhbmdlKTtcbiAgICBsZXQgdiA9IHZhbHVlIHx8IHBsYWNlaG9sZGVyVmFsdWU7XG4gICAgbGV0IGRheSA9IHYgJiYgXCJkYXlcIiBpbiB2ID8gdiA6IHVuZGVmaW5lZDtcbiAgICBsZXQgZGVmYXVsdFZhbHVlVGltZVpvbmUgPSBwcm9wcy5kZWZhdWx0VmFsdWUgJiYgXCJ0aW1lWm9uZVwiIGluIHByb3BzLmRlZmF1bHRWYWx1ZSA/IHByb3BzLmRlZmF1bHRWYWx1ZS50aW1lWm9uZSA6IHVuZGVmaW5lZDtcbiAgICBsZXQgcGxhY2Vob2xkZXJEYXRlID0gKDAsICQ3VXpvTSR1c2VNZW1vKSgoKT0+e1xuICAgICAgICBsZXQgdmFsdWVUaW1lWm9uZSA9IHYgJiYgXCJ0aW1lWm9uZVwiIGluIHYgPyB2LnRpbWVab25lIDogdW5kZWZpbmVkO1xuICAgICAgICByZXR1cm4gKHZhbHVlVGltZVpvbmUgfHwgZGVmYXVsdFZhbHVlVGltZVpvbmUpICYmIHBsYWNlaG9sZGVyVmFsdWUgPyAoMCwgJDdVem9NJHRvWm9uZWQpKCRlZmY1ZDhlZTUyOWFjNGJiJHZhciRjb252ZXJ0VmFsdWUocGxhY2Vob2xkZXJWYWx1ZSksIHZhbHVlVGltZVpvbmUgfHwgZGVmYXVsdFZhbHVlVGltZVpvbmUpIDogJGVmZjVkOGVlNTI5YWM0YmIkdmFyJGNvbnZlcnRWYWx1ZShwbGFjZWhvbGRlclZhbHVlKTtcbiAgICB9LCBbXG4gICAgICAgIHBsYWNlaG9sZGVyVmFsdWUsXG4gICAgICAgIHYsXG4gICAgICAgIGRlZmF1bHRWYWx1ZVRpbWVab25lXG4gICAgXSk7XG4gICAgbGV0IG1pbkRhdGUgPSAoMCwgJDdVem9NJHVzZU1lbW8pKCgpPT4kZWZmNWQ4ZWU1MjlhYzRiYiR2YXIkY29udmVydFZhbHVlKG1pblZhbHVlLCBkYXkpLCBbXG4gICAgICAgIG1pblZhbHVlLFxuICAgICAgICBkYXlcbiAgICBdKTtcbiAgICBsZXQgbWF4RGF0ZSA9ICgwLCAkN1V6b00kdXNlTWVtbykoKCk9PiRlZmY1ZDhlZTUyOWFjNGJiJHZhciRjb252ZXJ0VmFsdWUobWF4VmFsdWUsIGRheSksIFtcbiAgICAgICAgbWF4VmFsdWUsXG4gICAgICAgIGRheVxuICAgIF0pO1xuICAgIGxldCB0aW1lVmFsdWUgPSAoMCwgJDdVem9NJHVzZU1lbW8pKCgpPT52YWx1ZSAmJiBcImRheVwiIGluIHZhbHVlID8gKDAsICQ3VXpvTSR0b1RpbWUpKHZhbHVlKSA6IHZhbHVlLCBbXG4gICAgICAgIHZhbHVlXG4gICAgXSk7XG4gICAgbGV0IGRhdGVUaW1lID0gKDAsICQ3VXpvTSR1c2VNZW1vKSgoKT0+dmFsdWUgPT0gbnVsbCA/IG51bGwgOiAkZWZmNWQ4ZWU1MjlhYzRiYiR2YXIkY29udmVydFZhbHVlKHZhbHVlKSwgW1xuICAgICAgICB2YWx1ZVxuICAgIF0pO1xuICAgIGxldCBvbkNoYW5nZSA9IChuZXdWYWx1ZSk9PntcbiAgICAgICAgc2V0VmFsdWUoZGF5IHx8IGRlZmF1bHRWYWx1ZVRpbWVab25lID8gbmV3VmFsdWUgOiBuZXdWYWx1ZSAmJiAoMCwgJDdVem9NJHRvVGltZSkobmV3VmFsdWUpKTtcbiAgICB9O1xuICAgIGxldCBzdGF0ZSA9ICgwLCAkM2MwZmM3NjAzOWYxYzUxNiRleHBvcnQkNjBlODQ3NzhlZGZmNmQyNikoe1xuICAgICAgICAuLi5wcm9wcyxcbiAgICAgICAgdmFsdWU6IGRhdGVUaW1lLFxuICAgICAgICBkZWZhdWx0VmFsdWU6IHVuZGVmaW5lZCxcbiAgICAgICAgbWluVmFsdWU6IG1pbkRhdGUsXG4gICAgICAgIG1heFZhbHVlOiBtYXhEYXRlLFxuICAgICAgICBvbkNoYW5nZTogb25DaGFuZ2UsXG4gICAgICAgIGdyYW51bGFyaXR5OiBncmFudWxhcml0eSB8fCBcIm1pbnV0ZVwiLFxuICAgICAgICBtYXhHcmFudWxhcml0eTogXCJob3VyXCIsXG4gICAgICAgIHBsYWNlaG9sZGVyVmFsdWU6IHBsYWNlaG9sZGVyRGF0ZSxcbiAgICAgICAgLy8gQ2FsZW5kYXIgc2hvdWxkIG5vdCBtYXR0ZXIgZm9yIHRpbWUgZmllbGRzLlxuICAgICAgICBjcmVhdGVDYWxlbmRhcjogKCk9Pm5ldyAoMCwgJDdVem9NJEdyZWdvcmlhbkNhbGVuZGFyKSgpXG4gICAgfSk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgIHRpbWVWYWx1ZTogdGltZVZhbHVlXG4gICAgfTtcbn1cbmZ1bmN0aW9uICRlZmY1ZDhlZTUyOWFjNGJiJHZhciRjb252ZXJ0VmFsdWUodmFsdWUsIGRhdGUgPSAoMCwgJDdVem9NJHRvZGF5KSgoMCwgJDdVem9NJGdldExvY2FsVGltZVpvbmUpKCkpKSB7XG4gICAgaWYgKCF2YWx1ZSkgcmV0dXJuIG51bGw7XG4gICAgaWYgKFwiZGF5XCIgaW4gdmFsdWUpIHJldHVybiB2YWx1ZTtcbiAgICByZXR1cm4gKDAsICQ3VXpvTSR0b0NhbGVuZGFyRGF0ZVRpbWUpKGRhdGUsIHZhbHVlKTtcbn1cblxuXG5cblxuZXhwb3J0IHskYWI1YmYzZjYxODA5MDM4OSRleHBvcnQkODcxOTRiYjM3OGNjM2FjMiBhcyB1c2VEYXRlUGlja2VyU3RhdGUsICQzYzBmYzc2MDM5ZjFjNTE2JGV4cG9ydCQ2MGU4NDc3OGVkZmY2ZDI2IGFzIHVzZURhdGVGaWVsZFN0YXRlLCAkOTNjMzhhNWUyOGJlNjI0OSRleHBvcnQkZTUwYTYxYzFkZTlmNTc0IGFzIHVzZURhdGVSYW5nZVBpY2tlclN0YXRlLCAkZWZmNWQ4ZWU1MjlhYzRiYiRleHBvcnQkZmQ1M2NlZjBjYzc5NjEwMSBhcyB1c2VUaW1lRmllbGRTdGF0ZX07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tb2R1bGUuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@react-stately/datepicker/dist/import.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@react-stately/overlays/dist/import.mjs":
/*!**************************************************************!*\
  !*** ./node_modules/@react-stately/overlays/dist/import.mjs ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useOverlayTriggerState: () => (/* binding */ $fc909762b330b746$export$61c6a8c84e605fb6)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _react_stately_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @react-stately/utils */ \"(ssr)/./node_modules/@react-stately/utils/dist/import.mjs\");\n\n\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ /*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ \n\nfunction $fc909762b330b746$export$61c6a8c84e605fb6(props) {\n    let [isOpen, setOpen] = (0, _react_stately_utils__WEBPACK_IMPORTED_MODULE_1__.useControlledState)(props.isOpen, props.defaultOpen || false, props.onOpenChange);\n    const open = (0, react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        setOpen(true);\n    }, [\n        setOpen\n    ]);\n    const close = (0, react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        setOpen(false);\n    }, [\n        setOpen\n    ]);\n    const toggle = (0, react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        setOpen(!isOpen);\n    }, [\n        setOpen,\n        isOpen\n    ]);\n    return {\n        isOpen: isOpen,\n        setOpen: setOpen,\n        open: open,\n        close: close,\n        toggle: toggle\n    };\n}\n\n\n\n\n\n//# sourceMappingURL=module.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHJlYWN0LXN0YXRlbHkvb3ZlcmxheXMvZGlzdC9pbXBvcnQubWpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUF3RDtBQUM2Qjs7QUFFckY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsZ0NBQWdDLG9FQUF5QjtBQUN6RCxxQkFBcUIsOENBQWtCO0FBQ3ZDO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxzQkFBc0IsOENBQWtCO0FBQ3hDO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSx1QkFBdUIsOENBQWtCO0FBQ3pDO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7O0FBSzZFO0FBQzdFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWVkdXNhLW5leHQvLi9ub2RlX21vZHVsZXMvQHJlYWN0LXN0YXRlbHkvb3ZlcmxheXMvZGlzdC9pbXBvcnQubWpzPzAwYWYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHt1c2VDYWxsYmFjayBhcyAkNG9BM1AkdXNlQ2FsbGJhY2t9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHt1c2VDb250cm9sbGVkU3RhdGUgYXMgJDRvQTNQJHVzZUNvbnRyb2xsZWRTdGF0ZX0gZnJvbSBcIkByZWFjdC1zdGF0ZWx5L3V0aWxzXCI7XG5cbi8qXG4gKiBDb3B5cmlnaHQgMjAyMCBBZG9iZS4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFRoaXMgZmlsZSBpcyBsaWNlbnNlZCB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4gWW91IG1heSBvYnRhaW4gYSBjb3B5XG4gKiBvZiB0aGUgTGljZW5zZSBhdCBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyXG4gKiB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBSRVBSRVNFTlRBVElPTlNcbiAqIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZVxuICogZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqLyAvKlxuICogQ29weXJpZ2h0IDIwMjAgQWRvYmUuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBUaGlzIGZpbGUgaXMgbGljZW5zZWQgdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuIFlvdSBtYXkgb2J0YWluIGEgY29weVxuICogb2YgdGhlIExpY2Vuc2UgYXQgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlclxuICogdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgUkVQUkVTRU5UQVRJT05TXG4gKiBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2VcbiAqIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi8gXG5cbmZ1bmN0aW9uICRmYzkwOTc2MmIzMzBiNzQ2JGV4cG9ydCQ2MWM2YThjODRlNjA1ZmI2KHByb3BzKSB7XG4gICAgbGV0IFtpc09wZW4sIHNldE9wZW5dID0gKDAsICQ0b0EzUCR1c2VDb250cm9sbGVkU3RhdGUpKHByb3BzLmlzT3BlbiwgcHJvcHMuZGVmYXVsdE9wZW4gfHwgZmFsc2UsIHByb3BzLm9uT3BlbkNoYW5nZSk7XG4gICAgY29uc3Qgb3BlbiA9ICgwLCAkNG9BM1AkdXNlQ2FsbGJhY2spKCgpPT57XG4gICAgICAgIHNldE9wZW4odHJ1ZSk7XG4gICAgfSwgW1xuICAgICAgICBzZXRPcGVuXG4gICAgXSk7XG4gICAgY29uc3QgY2xvc2UgPSAoMCwgJDRvQTNQJHVzZUNhbGxiYWNrKSgoKT0+e1xuICAgICAgICBzZXRPcGVuKGZhbHNlKTtcbiAgICB9LCBbXG4gICAgICAgIHNldE9wZW5cbiAgICBdKTtcbiAgICBjb25zdCB0b2dnbGUgPSAoMCwgJDRvQTNQJHVzZUNhbGxiYWNrKSgoKT0+e1xuICAgICAgICBzZXRPcGVuKCFpc09wZW4pO1xuICAgIH0sIFtcbiAgICAgICAgc2V0T3BlbixcbiAgICAgICAgaXNPcGVuXG4gICAgXSk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgaXNPcGVuOiBpc09wZW4sXG4gICAgICAgIHNldE9wZW46IHNldE9wZW4sXG4gICAgICAgIG9wZW46IG9wZW4sXG4gICAgICAgIGNsb3NlOiBjbG9zZSxcbiAgICAgICAgdG9nZ2xlOiB0b2dnbGVcbiAgICB9O1xufVxuXG5cblxuXG5leHBvcnQgeyRmYzkwOTc2MmIzMzBiNzQ2JGV4cG9ydCQ2MWM2YThjODRlNjA1ZmI2IGFzIHVzZU92ZXJsYXlUcmlnZ2VyU3RhdGV9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bW9kdWxlLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@react-stately/overlays/dist/import.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@react-stately/utils/dist/import.mjs":
/*!***********************************************************!*\
  !*** ./node_modules/@react-stately/utils/dist/import.mjs ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   clamp: () => (/* binding */ $9446cca9a3875146$export$7d15b64cf5a3a4c4),\n/* harmony export */   snapValueToStep: () => (/* binding */ $9446cca9a3875146$export$cb6e0bb50bc19463),\n/* harmony export */   toFixedNumber: () => (/* binding */ $9446cca9a3875146$export$b6268554fba451f),\n/* harmony export */   useControlledState: () => (/* binding */ $458b0a5536c1a7cf$export$40bfa8c7b0832715)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ /*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ \nfunction $458b0a5536c1a7cf$export$40bfa8c7b0832715(value, defaultValue, onChange) {\n    let [stateValue, setStateValue] = (0, react__WEBPACK_IMPORTED_MODULE_0__.useState)(value || defaultValue);\n    let isControlledRef = (0, react__WEBPACK_IMPORTED_MODULE_0__.useRef)(value !== undefined);\n    let isControlled = value !== undefined;\n    (0, react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        let wasControlled = isControlledRef.current;\n        if (wasControlled !== isControlled) console.warn(`WARN: A component changed from ${wasControlled ? \"controlled\" : \"uncontrolled\"} to ${isControlled ? \"controlled\" : \"uncontrolled\"}.`);\n        isControlledRef.current = isControlled;\n    }, [\n        isControlled\n    ]);\n    let currentValue = isControlled ? value : stateValue;\n    let setValue = (0, react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((value, ...args)=>{\n        let onChangeCaller = (value, ...onChangeArgs)=>{\n            if (onChange) {\n                if (!Object.is(currentValue, value)) onChange(value, ...onChangeArgs);\n            }\n            if (!isControlled) // If uncontrolled, mutate the currentValue local variable so that\n            // calling setState multiple times with the same value only emits onChange once.\n            // We do not use a ref for this because we specifically _do_ want the value to\n            // reset every render, and assigning to a ref in render breaks aborted suspended renders.\n            // eslint-disable-next-line react-hooks/exhaustive-deps\n            currentValue = value;\n        };\n        if (typeof value === \"function\") {\n            console.warn(\"We can not support a function callback. See Github Issues for details https://github.com/adobe/react-spectrum/issues/2320\");\n            // this supports functional updates https://reactjs.org/docs/hooks-reference.html#functional-updates\n            // when someone using useControlledState calls setControlledState(myFunc)\n            // this will call our useState setState with a function as well which invokes myFunc and calls onChange with the value from myFunc\n            // if we're in an uncontrolled state, then we also return the value of myFunc which to setState looks as though it was just called with myFunc from the beginning\n            // otherwise we just return the controlled value, which won't cause a rerender because React knows to bail out when the value is the same\n            let updateFunction = (oldValue, ...functionArgs)=>{\n                let interceptedValue = value(isControlled ? currentValue : oldValue, ...functionArgs);\n                onChangeCaller(interceptedValue, ...args);\n                if (!isControlled) return interceptedValue;\n                return oldValue;\n            };\n            setStateValue(updateFunction);\n        } else {\n            if (!isControlled) setStateValue(value);\n            onChangeCaller(value, ...args);\n        }\n    }, [\n        isControlled,\n        currentValue,\n        onChange\n    ]);\n    return [\n        currentValue,\n        setValue\n    ];\n}\n\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ /**\n * Takes a value and forces it to the closest min/max if it's outside. Also forces it to the closest valid step.\n */ function $9446cca9a3875146$export$7d15b64cf5a3a4c4(value, min = -Infinity, max = Infinity) {\n    let newValue = Math.min(Math.max(value, min), max);\n    return newValue;\n}\nfunction $9446cca9a3875146$export$cb6e0bb50bc19463(value, min, max, step) {\n    min = Number(min);\n    max = Number(max);\n    let remainder = (value - (isNaN(min) ? 0 : min)) % step;\n    let snappedValue = Math.abs(remainder) * 2 >= step ? value + Math.sign(remainder) * (step - Math.abs(remainder)) : value - remainder;\n    if (!isNaN(min)) {\n        if (snappedValue < min) snappedValue = min;\n        else if (!isNaN(max) && snappedValue > max) snappedValue = min + Math.floor((max - min) / step) * step;\n    } else if (!isNaN(max) && snappedValue > max) snappedValue = Math.floor(max / step) * step;\n    // correct floating point behavior by rounding to step precision\n    let string = step.toString();\n    let index = string.indexOf(\".\");\n    let precision = index >= 0 ? string.length - index : 0;\n    if (precision > 0) {\n        let pow = Math.pow(10, precision);\n        snappedValue = Math.round(snappedValue * pow) / pow;\n    }\n    return snappedValue;\n}\nfunction $9446cca9a3875146$export$b6268554fba451f(value, digits, base = 10) {\n    const pow = Math.pow(base, digits);\n    return Math.round(value * pow) / pow;\n}\n\n\n\n\n\n//# sourceMappingURL=module.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHJlYWN0LXN0YXRlbHkvdXRpbHMvZGlzdC9pbXBvcnQubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQTZJOztBQUU3STtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBDQUEwQywyQ0FBZTtBQUN6RCw4QkFBOEIseUNBQWE7QUFDM0M7QUFDQSxRQUFRLDRDQUFnQjtBQUN4QjtBQUNBLDJGQUEyRiwrQ0FBK0MsS0FBSyw2Q0FBNkM7QUFDNUw7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLDhDQUFrQjtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7QUFLc1A7QUFDdFAiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tZWR1c2EtbmV4dC8uL25vZGVfbW9kdWxlcy9AcmVhY3Qtc3RhdGVseS91dGlscy9kaXN0L2ltcG9ydC5tanM/ZjY0OSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge3VzZVN0YXRlIGFzICQ2aW11aCR1c2VTdGF0ZSwgdXNlUmVmIGFzICQ2aW11aCR1c2VSZWYsIHVzZUVmZmVjdCBhcyAkNmltdWgkdXNlRWZmZWN0LCB1c2VDYWxsYmFjayBhcyAkNmltdWgkdXNlQ2FsbGJhY2t9IGZyb20gXCJyZWFjdFwiO1xuXG4vKlxuICogQ29weXJpZ2h0IDIwMjAgQWRvYmUuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBUaGlzIGZpbGUgaXMgbGljZW5zZWQgdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuIFlvdSBtYXkgb2J0YWluIGEgY29weVxuICogb2YgdGhlIExpY2Vuc2UgYXQgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlclxuICogdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgUkVQUkVTRU5UQVRJT05TXG4gKiBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2VcbiAqIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi8gLypcbiAqIENvcHlyaWdodCAyMDIwIEFkb2JlLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogVGhpcyBmaWxlIGlzIGxpY2Vuc2VkIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLiBZb3UgbWF5IG9idGFpbiBhIGNvcHlcbiAqIG9mIHRoZSBMaWNlbnNlIGF0IGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXJcbiAqIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIFJFUFJFU0VOVEFUSU9OU1xuICogT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlXG4gKiBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovIFxuZnVuY3Rpb24gJDQ1OGIwYTU1MzZjMWE3Y2YkZXhwb3J0JDQwYmZhOGM3YjA4MzI3MTUodmFsdWUsIGRlZmF1bHRWYWx1ZSwgb25DaGFuZ2UpIHtcbiAgICBsZXQgW3N0YXRlVmFsdWUsIHNldFN0YXRlVmFsdWVdID0gKDAsICQ2aW11aCR1c2VTdGF0ZSkodmFsdWUgfHwgZGVmYXVsdFZhbHVlKTtcbiAgICBsZXQgaXNDb250cm9sbGVkUmVmID0gKDAsICQ2aW11aCR1c2VSZWYpKHZhbHVlICE9PSB1bmRlZmluZWQpO1xuICAgIGxldCBpc0NvbnRyb2xsZWQgPSB2YWx1ZSAhPT0gdW5kZWZpbmVkO1xuICAgICgwLCAkNmltdWgkdXNlRWZmZWN0KSgoKT0+e1xuICAgICAgICBsZXQgd2FzQ29udHJvbGxlZCA9IGlzQ29udHJvbGxlZFJlZi5jdXJyZW50O1xuICAgICAgICBpZiAod2FzQ29udHJvbGxlZCAhPT0gaXNDb250cm9sbGVkKSBjb25zb2xlLndhcm4oYFdBUk46IEEgY29tcG9uZW50IGNoYW5nZWQgZnJvbSAke3dhc0NvbnRyb2xsZWQgPyBcImNvbnRyb2xsZWRcIiA6IFwidW5jb250cm9sbGVkXCJ9IHRvICR7aXNDb250cm9sbGVkID8gXCJjb250cm9sbGVkXCIgOiBcInVuY29udHJvbGxlZFwifS5gKTtcbiAgICAgICAgaXNDb250cm9sbGVkUmVmLmN1cnJlbnQgPSBpc0NvbnRyb2xsZWQ7XG4gICAgfSwgW1xuICAgICAgICBpc0NvbnRyb2xsZWRcbiAgICBdKTtcbiAgICBsZXQgY3VycmVudFZhbHVlID0gaXNDb250cm9sbGVkID8gdmFsdWUgOiBzdGF0ZVZhbHVlO1xuICAgIGxldCBzZXRWYWx1ZSA9ICgwLCAkNmltdWgkdXNlQ2FsbGJhY2spKCh2YWx1ZSwgLi4uYXJncyk9PntcbiAgICAgICAgbGV0IG9uQ2hhbmdlQ2FsbGVyID0gKHZhbHVlLCAuLi5vbkNoYW5nZUFyZ3MpPT57XG4gICAgICAgICAgICBpZiAob25DaGFuZ2UpIHtcbiAgICAgICAgICAgICAgICBpZiAoIU9iamVjdC5pcyhjdXJyZW50VmFsdWUsIHZhbHVlKSkgb25DaGFuZ2UodmFsdWUsIC4uLm9uQ2hhbmdlQXJncyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWlzQ29udHJvbGxlZCkgLy8gSWYgdW5jb250cm9sbGVkLCBtdXRhdGUgdGhlIGN1cnJlbnRWYWx1ZSBsb2NhbCB2YXJpYWJsZSBzbyB0aGF0XG4gICAgICAgICAgICAvLyBjYWxsaW5nIHNldFN0YXRlIG11bHRpcGxlIHRpbWVzIHdpdGggdGhlIHNhbWUgdmFsdWUgb25seSBlbWl0cyBvbkNoYW5nZSBvbmNlLlxuICAgICAgICAgICAgLy8gV2UgZG8gbm90IHVzZSBhIHJlZiBmb3IgdGhpcyBiZWNhdXNlIHdlIHNwZWNpZmljYWxseSBfZG9fIHdhbnQgdGhlIHZhbHVlIHRvXG4gICAgICAgICAgICAvLyByZXNldCBldmVyeSByZW5kZXIsIGFuZCBhc3NpZ25pbmcgdG8gYSByZWYgaW4gcmVuZGVyIGJyZWFrcyBhYm9ydGVkIHN1c3BlbmRlZCByZW5kZXJzLlxuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL2V4aGF1c3RpdmUtZGVwc1xuICAgICAgICAgICAgY3VycmVudFZhbHVlID0gdmFsdWU7XG4gICAgICAgIH07XG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKFwiV2UgY2FuIG5vdCBzdXBwb3J0IGEgZnVuY3Rpb24gY2FsbGJhY2suIFNlZSBHaXRodWIgSXNzdWVzIGZvciBkZXRhaWxzIGh0dHBzOi8vZ2l0aHViLmNvbS9hZG9iZS9yZWFjdC1zcGVjdHJ1bS9pc3N1ZXMvMjMyMFwiKTtcbiAgICAgICAgICAgIC8vIHRoaXMgc3VwcG9ydHMgZnVuY3Rpb25hbCB1cGRhdGVzIGh0dHBzOi8vcmVhY3Rqcy5vcmcvZG9jcy9ob29rcy1yZWZlcmVuY2UuaHRtbCNmdW5jdGlvbmFsLXVwZGF0ZXNcbiAgICAgICAgICAgIC8vIHdoZW4gc29tZW9uZSB1c2luZyB1c2VDb250cm9sbGVkU3RhdGUgY2FsbHMgc2V0Q29udHJvbGxlZFN0YXRlKG15RnVuYylcbiAgICAgICAgICAgIC8vIHRoaXMgd2lsbCBjYWxsIG91ciB1c2VTdGF0ZSBzZXRTdGF0ZSB3aXRoIGEgZnVuY3Rpb24gYXMgd2VsbCB3aGljaCBpbnZva2VzIG15RnVuYyBhbmQgY2FsbHMgb25DaGFuZ2Ugd2l0aCB0aGUgdmFsdWUgZnJvbSBteUZ1bmNcbiAgICAgICAgICAgIC8vIGlmIHdlJ3JlIGluIGFuIHVuY29udHJvbGxlZCBzdGF0ZSwgdGhlbiB3ZSBhbHNvIHJldHVybiB0aGUgdmFsdWUgb2YgbXlGdW5jIHdoaWNoIHRvIHNldFN0YXRlIGxvb2tzIGFzIHRob3VnaCBpdCB3YXMganVzdCBjYWxsZWQgd2l0aCBteUZ1bmMgZnJvbSB0aGUgYmVnaW5uaW5nXG4gICAgICAgICAgICAvLyBvdGhlcndpc2Ugd2UganVzdCByZXR1cm4gdGhlIGNvbnRyb2xsZWQgdmFsdWUsIHdoaWNoIHdvbid0IGNhdXNlIGEgcmVyZW5kZXIgYmVjYXVzZSBSZWFjdCBrbm93cyB0byBiYWlsIG91dCB3aGVuIHRoZSB2YWx1ZSBpcyB0aGUgc2FtZVxuICAgICAgICAgICAgbGV0IHVwZGF0ZUZ1bmN0aW9uID0gKG9sZFZhbHVlLCAuLi5mdW5jdGlvbkFyZ3MpPT57XG4gICAgICAgICAgICAgICAgbGV0IGludGVyY2VwdGVkVmFsdWUgPSB2YWx1ZShpc0NvbnRyb2xsZWQgPyBjdXJyZW50VmFsdWUgOiBvbGRWYWx1ZSwgLi4uZnVuY3Rpb25BcmdzKTtcbiAgICAgICAgICAgICAgICBvbkNoYW5nZUNhbGxlcihpbnRlcmNlcHRlZFZhbHVlLCAuLi5hcmdzKTtcbiAgICAgICAgICAgICAgICBpZiAoIWlzQ29udHJvbGxlZCkgcmV0dXJuIGludGVyY2VwdGVkVmFsdWU7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG9sZFZhbHVlO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHNldFN0YXRlVmFsdWUodXBkYXRlRnVuY3Rpb24pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKCFpc0NvbnRyb2xsZWQpIHNldFN0YXRlVmFsdWUodmFsdWUpO1xuICAgICAgICAgICAgb25DaGFuZ2VDYWxsZXIodmFsdWUsIC4uLmFyZ3MpO1xuICAgICAgICB9XG4gICAgfSwgW1xuICAgICAgICBpc0NvbnRyb2xsZWQsXG4gICAgICAgIGN1cnJlbnRWYWx1ZSxcbiAgICAgICAgb25DaGFuZ2VcbiAgICBdKTtcbiAgICByZXR1cm4gW1xuICAgICAgICBjdXJyZW50VmFsdWUsXG4gICAgICAgIHNldFZhbHVlXG4gICAgXTtcbn1cblxuXG4vKlxuICogQ29weXJpZ2h0IDIwMjAgQWRvYmUuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBUaGlzIGZpbGUgaXMgbGljZW5zZWQgdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuIFlvdSBtYXkgb2J0YWluIGEgY29weVxuICogb2YgdGhlIExpY2Vuc2UgYXQgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlclxuICogdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgUkVQUkVTRU5UQVRJT05TXG4gKiBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2VcbiAqIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi8gLyoqXG4gKiBUYWtlcyBhIHZhbHVlIGFuZCBmb3JjZXMgaXQgdG8gdGhlIGNsb3Nlc3QgbWluL21heCBpZiBpdCdzIG91dHNpZGUuIEFsc28gZm9yY2VzIGl0IHRvIHRoZSBjbG9zZXN0IHZhbGlkIHN0ZXAuXG4gKi8gZnVuY3Rpb24gJDk0NDZjY2E5YTM4NzUxNDYkZXhwb3J0JDdkMTViNjRjZjVhM2E0YzQodmFsdWUsIG1pbiA9IC1JbmZpbml0eSwgbWF4ID0gSW5maW5pdHkpIHtcbiAgICBsZXQgbmV3VmFsdWUgPSBNYXRoLm1pbihNYXRoLm1heCh2YWx1ZSwgbWluKSwgbWF4KTtcbiAgICByZXR1cm4gbmV3VmFsdWU7XG59XG5mdW5jdGlvbiAkOTQ0NmNjYTlhMzg3NTE0NiRleHBvcnQkY2I2ZTBiYjUwYmMxOTQ2Myh2YWx1ZSwgbWluLCBtYXgsIHN0ZXApIHtcbiAgICBtaW4gPSBOdW1iZXIobWluKTtcbiAgICBtYXggPSBOdW1iZXIobWF4KTtcbiAgICBsZXQgcmVtYWluZGVyID0gKHZhbHVlIC0gKGlzTmFOKG1pbikgPyAwIDogbWluKSkgJSBzdGVwO1xuICAgIGxldCBzbmFwcGVkVmFsdWUgPSBNYXRoLmFicyhyZW1haW5kZXIpICogMiA+PSBzdGVwID8gdmFsdWUgKyBNYXRoLnNpZ24ocmVtYWluZGVyKSAqIChzdGVwIC0gTWF0aC5hYnMocmVtYWluZGVyKSkgOiB2YWx1ZSAtIHJlbWFpbmRlcjtcbiAgICBpZiAoIWlzTmFOKG1pbikpIHtcbiAgICAgICAgaWYgKHNuYXBwZWRWYWx1ZSA8IG1pbikgc25hcHBlZFZhbHVlID0gbWluO1xuICAgICAgICBlbHNlIGlmICghaXNOYU4obWF4KSAmJiBzbmFwcGVkVmFsdWUgPiBtYXgpIHNuYXBwZWRWYWx1ZSA9IG1pbiArIE1hdGguZmxvb3IoKG1heCAtIG1pbikgLyBzdGVwKSAqIHN0ZXA7XG4gICAgfSBlbHNlIGlmICghaXNOYU4obWF4KSAmJiBzbmFwcGVkVmFsdWUgPiBtYXgpIHNuYXBwZWRWYWx1ZSA9IE1hdGguZmxvb3IobWF4IC8gc3RlcCkgKiBzdGVwO1xuICAgIC8vIGNvcnJlY3QgZmxvYXRpbmcgcG9pbnQgYmVoYXZpb3IgYnkgcm91bmRpbmcgdG8gc3RlcCBwcmVjaXNpb25cbiAgICBsZXQgc3RyaW5nID0gc3RlcC50b1N0cmluZygpO1xuICAgIGxldCBpbmRleCA9IHN0cmluZy5pbmRleE9mKFwiLlwiKTtcbiAgICBsZXQgcHJlY2lzaW9uID0gaW5kZXggPj0gMCA/IHN0cmluZy5sZW5ndGggLSBpbmRleCA6IDA7XG4gICAgaWYgKHByZWNpc2lvbiA+IDApIHtcbiAgICAgICAgbGV0IHBvdyA9IE1hdGgucG93KDEwLCBwcmVjaXNpb24pO1xuICAgICAgICBzbmFwcGVkVmFsdWUgPSBNYXRoLnJvdW5kKHNuYXBwZWRWYWx1ZSAqIHBvdykgLyBwb3c7XG4gICAgfVxuICAgIHJldHVybiBzbmFwcGVkVmFsdWU7XG59XG5mdW5jdGlvbiAkOTQ0NmNjYTlhMzg3NTE0NiRleHBvcnQkYjYyNjg1NTRmYmE0NTFmKHZhbHVlLCBkaWdpdHMsIGJhc2UgPSAxMCkge1xuICAgIGNvbnN0IHBvdyA9IE1hdGgucG93KGJhc2UsIGRpZ2l0cyk7XG4gICAgcmV0dXJuIE1hdGgucm91bmQodmFsdWUgKiBwb3cpIC8gcG93O1xufVxuXG5cblxuXG5leHBvcnQgeyQ0NThiMGE1NTM2YzFhN2NmJGV4cG9ydCQ0MGJmYThjN2IwODMyNzE1IGFzIHVzZUNvbnRyb2xsZWRTdGF0ZSwgJDk0NDZjY2E5YTM4NzUxNDYkZXhwb3J0JDdkMTViNjRjZjVhM2E0YzQgYXMgY2xhbXAsICQ5NDQ2Y2NhOWEzODc1MTQ2JGV4cG9ydCRjYjZlMGJiNTBiYzE5NDYzIGFzIHNuYXBWYWx1ZVRvU3RlcCwgJDk0NDZjY2E5YTM4NzUxNDYkZXhwb3J0JGI2MjY4NTU0ZmJhNDUxZiBhcyB0b0ZpeGVkTnVtYmVyfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1vZHVsZS5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@react-stately/utils/dist/import.mjs\n");

/***/ })

};
;